<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<beans>	

  <alias name="internal-ome.api.IAdmin" alias="internal-ome.api.LocalAdmin"/>
  
  <bean parent="level2" name="internal-ome.api.IAdmin" class="ome.logic.AdminImpl">
    <description>
    Privileged bean which has several "private" references injected. This is not
    an example of what should be done.
    </description>
    <property name="jdbcTemplate" ref="simpleJdbcTemplate"/>
    <property name="securitySystem" ref="securitySystem"/>
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="mailSender" ref="mailSender"/>
    <property name="templateMessage" ref="templateMessage"/>
    <property name="ldapService" ref="internal-ome.api.LocalLdap"/>
    <property name="aclVoter"    ref="aclVoter"/>
  </bean> 
 
  <bean name="managed-ome.api.IAdmin" parent="managedService">
    <property name="proxyInterfaces">
      <list>
        <value>ome.api.IAdmin</value>
        <value>ome.api.local.LocalAdmin</value>        
      </list>
    </property>
    <property name="target" ref="internal-ome.api.IAdmin"/>
  </bean> 
  
  <!-- configure the MailSender with the authenticated session -->
  <bean id="mailSender"
      class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="${omero.resetpassword.host}" />
    <property name="port" value="${omero.resetpassword.port}" />
    <property name="protocol" value="${omero.resetpassword.mail.transport.protocol}" />
    <property name="session" ref="mailSession" />    
  </bean>
  
	<!-- setup an authenticated session -->
	<bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
		<constructor-arg>
			<props>
				<prop key="mail.smtp.auth">${omero.resetpassword.mail.smtp.auth}</prop>
				<prop key="mail.debug">${omero.resetpassword.mail.debug}</prop>
				<prop key="mail.smtp.starttls.enable">${omero.resetpassword.mail.smtp.starttls.enable}</prop>
				<prop key="mail.smtp.socketFactory.port">${omero.resetpassword.mail.smtp.socketFactory.port}</prop>
				<prop key="mail.smtp.socketFactory.class">${omero.resetpassword.mail.smtp.socketFactory.class}</prop>
				<prop key="mail.smtp.socketFactory.fallback">${omero.resetpassword.mail.smtp.socketFactory.fallback}</prop>	
				<prop key="mail.smtp.timeout">${omero.resetpassword.mail.smtp.timeout}</prop>			
			</props>
		</constructor-arg>
		<constructor-arg ref="smtpAuthenticator" />
	</bean>
  
  <!-- Authenticator implementation -->
    <bean id="smtpAuthenticator" class="ome.security.SmtpAuthenticator">
		<constructor-arg value="${omero.resetpassword.username}" />
		<constructor-arg value="${omero.resetpassword.password}" />
	</bean>

  <!-- this is a template message that we can pre-load with default state -->
  <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
    <property name="from" value="${omero.resetpassword.from}" />
  </bean>
  
</beans>