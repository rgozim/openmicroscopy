<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-lazy-init="true">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

  <description>
    Configuration for standalone properties and general database access.
    The beans in this configuration file should NOT be generally accessed.
    In general, this entire file should be considered to have a "private" scope.

    Note: As other forms of data access (caching esp. distributed, Freeze, etc.
    are added, they should also be configured at this level)
  </description>

  <!--
        Unique identifier for this Spring context. This is important to
        distinguish multiple uses of the same database, for example in clustering.
        This value may also be used as the internal session for this server instance
  -->
  <bean id="uuid_object" class="java.util.UUID" factory-method="randomUUID"/>
  <bean id="uuid" factory-bean="uuid_object" factory-method="toString"/>

  <bean id="databaseIdentity" class="ome.services.db.DatabaseIdentity">
    <constructor-arg index="0" value="${omero.db.authority}"/>
    <constructor-arg index="1" ref="isolatedSqlAction"/>
  </bean>

  <bean id="omero.db.uuid" factory-bean="databaseIdentity" factory-method="getUuid"/>

  <!--  Scope: private -->

  <bean id="cacheManager" class="ome.tools.spring.ShutdownSafeEhcacheManagerFactoryBean"/>

  <bean id="transactionAttributeSource" class="org.springframework.transaction.interceptor.CompositeTransactionAttributeSource">
    <constructor-arg>
      <list>
        <!-- This stack first will return readOnly=true for all share activities,
             then will use the @Transactional annotation on any implementation method (or class),
             and finally will throw an InternalException if all other return values have
             been null. -->
        <bean class="ome.services.sharing.ShareRestrictionTransactionAttributeSource">
          <constructor-arg ref="currentDetails"/>
          <constructor-arg ref="sessionCache"/>
        </bean>
        <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
        <bean class="ome.tools.spring.ForceTransactionAttributeSource"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="transactionHandler"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <description>
      Scope: private
    </description>
    <property name="transactionManager" ref="transactionManager"/>
    <property name="transactionAttributeSource" ref="transactionAttributeSource"/>
  </bean>

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="simpleSqlAction" class="${omero.db.sql_action_class}">
    <description>
    Takes part in any currently running Hibernate transaction.
    </description>
    <constructor-arg>
      <bean class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg ref="dataSource"/>
      </bean>
    </constructor-arg>
  </bean>
  
  <bean id="isolatedSqlAction" class="${omero.db.sql_action_class}">
    <description>
    Provides JDBC access WITHOUT taking part in Hibernate transactions
    </description>
    <constructor-arg>
      <bean class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg ref="selfCorrectingDataSource"/>
      </bean>
    </constructor-arg>
  </bean>

  <!--
  DATA SOURCE:
  ====================================================================
  The TableIdGenerator used by all model objects assumes the following
  three data source wrapping one another
  -->
  <alias name="txAwareDataSource" alias="dataSource"/>

  <bean id="txAwareDataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
    <property name="targetDataSource" ref="selfCorrectingDataSource"/>
  </bean>

  <bean id="selfCorrectingDataSource" class="ome.services.db.SelfCorrectingDataSource">
    <constructor-arg ref="nonXaDataSource"/>
    <constructor-arg value="300000"/> <!--5 minutes of errors -->
  </bean>

  <bean id="nonXaDataSource" class="bitronix.tm.resource.jdbc.PoolingDataSource">
    <property name="className" value="bitronix.tm.resource.jdbc.lrc.LrcXADataSource"/>
    <property name="uniqueName" ref="uuid"/>
    <property name="maxPoolSize" value="${omero.db.poolsize}"/>
    <!-- NPE ?? property name="loginTimeout" value="5" -->
    <property name="allowLocalTransactions" value="true"/>
    <property name="driverProperties">
      <props>
        <prop key="driverClassName">org.postgresql.Driver</prop>
        <prop key="url">jdbc:postgresql://${omero.db.host}:${omero.db.port}/${omero.db.name}</prop>
        <prop key="user">${omero.db.user}</prop>
        <prop key="password">${omero.db.pass}</prop>
      </props>
    </property>
  </bean>

  <!--
  <bean id="nonXaDataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean">
    <property name="uniqueResourceName" ref="uuid"/>
    <property name="driverClassName" value="org.postgresql.Driver"/>
    <property name="url" value="jdbc:postgresql://${omero.db.host}/${omero.db.name}"/>
    <property name="user" value="${omero.db.user}"/>
    <property name="password" value="${omero.db.pass}"/>
    <property name="maxPoolSize" value="${omero.db.poolsize}"/>
    <property name="reapTimeout" value="3000"/>
    <property name="loginTimeout" value="5"/>
    <property name="borrowConnectionTimeout" value="5"/>
  </bean>
  -->

</beans>

