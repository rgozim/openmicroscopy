<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-lazy-init="true">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

  <description>
    Configuration for standalone properties and general database access.
    The beans in this configuration file should NOT be generally accessed.
    In general, this entire file should be considered to have a "private" scope.

    Note: As other forms of data access (caching esp. distributed, Freeze, etc.
    are added, they should also be configured at this level)
  </description>

  <!--
        Unique identifier for this Spring context. This is important to
        distinguish multiple uses of the same database, for example in clustering.
        This value may also be used as the internal session for this server instance
  -->
  <bean id="uuid_object" class="java.util.UUID" factory-method="randomUUID"/>
  <bean id="uuid" factory-bean="uuid_object" factory-method="toString"/>

  <!--  Scope: private -->

  <bean id="cacheManager" class="ome.tools.spring.ShutdownSafeEhcacheManagerFactoryBean"/>

  <bean id="jtaTransactionManager" class="com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple"/>

  <bean id="jtaUserTransaction" class="com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple"/>

  <bean id="xaDataSource" class="org.postgresql.xa.PGXADataSource">
        <property name="user" value="${omero.db.user}"/>
        <property name="password" value="${omero.db.pass}"/>
        <property name="databaseName" value="${omero.db.name}"/>
        <property name="serverName" value="${omero.db.host}"/>
        <property name="portNumber" value="5432"/>
  </bean>

  <bean id="dataSource" destroy-method="destroy"
    class="ome.services.util.arjuna.XADataSourceWrapper">
    <constructor-arg index="0" ref="xaDataSource"/>
    <constructor-arg index="1" value="OmeroDs"/>
    <constructor-arg index="2" value="${java.naming.factory.initial}"/>
    <constructor-arg index="3" value="${java.naming.provider.url}"/>
    <constructor-arg index="4" value="${omero.db.user}"/>
    <constructor-arg index="5" value="${omero.db.pass}"/>
  </bean>

  <bean id="jndiBind" class="ome.tools.hibernate.JBossTsTransactionManagerLookup">
    <constructor-arg ref="jtaUserTransaction"/>
    <constructor-arg ref="jtaTransactionManager"/>
    <constructor-arg>
      <map>
        <entry key="OmeroDs" value-ref="dataSource"/>
      </map>
    </constructor-arg>
  </bean>

  <bean id="transactionManager" depends-on="jndiBind"
        class="org.springframework.transaction.jta.JtaTransactionManager">
    <property name="transactionManager" ref="jtaTransactionManager" />
    <property name="userTransaction" ref="jtaUserTransaction"/>
  </bean>

  <bean id="transactionHandler"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <description>
      Scope: private
    </description>
    <property name="transactionManager" ref="transactionManager"/>
    <property name="transactionAttributeSource">
      <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
    </property>
  </bean>

  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <constructor-arg ref="transactionManager"/>
  </bean>

  <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
    <description>
    Scope: private

    Users of JDBC Templates may need to manage their own transactions if they
    don't expect to be part of an existing JTA transaction.
    </description>
    <constructor-arg ref="dataSource"/>
  </bean>

  <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>

  <bean id="loggingDataSource" class="ome.services.util.LoggingDataSource" lazy-init="true">
    <description>
    Scope: private

    Under extreme conditions, the data source can run out of connections at which time the
    server can come to a stand still. To catch this situation, the logging
    data source will now print to a special category which can be detected by
    log4j appenders and handled appropriately (sending email, etc.)
    </description>
    <constructor-arg ref="dataSource"/>
  </bean>

</beans>

