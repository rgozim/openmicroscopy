<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-lazy-init="true">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

  <description>
    Configuration for standalone properties and general database access.
    The beans in this configuration file should NOT be generally accessed.
    In general, this entire file should be considered to have a "private" scope.
    
    Note: As other forms of data access (caching esp. distributed, Freeze, etc.
    are added, they should also be configured at this level)
  </description>

  <!-- Unique identifier for this Spring context. This is important to
  distinguish multiple uses of the same database, for example in clustering -->
  <bean id="uuid_object" class="java.util.UUID" factory-method="randomUUID"/>
  <bean id="uuid" factory-bean="uuid_object" factory-method="toString"/>

  <!--  Scope: private -->

  <bean id="cacheManager" class="ome.tools.spring.ShutdownSafeEhcacheManagerFactoryBean"/>

  <bean id="xaDataSource"
        class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" ref="uuid"/>
    <property name="xaDataSourceClassName" value="org.postgresql.xa.PGXADataSource"/>
    <property name="xaProperties">
      <props>
        <prop key="user">${hibernate.connection.username}</prop>
        <prop key="password">${hibernate.connection.password}</prop>
        <prop key="databaseName">${database.name}</prop>
        <prop key="serverName">${database.host}</prop>
        <prop key="portNumber">5432</prop>
      </props>
    </property>
    <property name="maxPoolSize"><value>${c3p0.maxPoolSize}</value></property>
  </bean>

  <!-- configured in etc/jta.properties -->
  <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close"/>
  <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"/>

  <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
    <property name="transactionManager"><ref bean="atomikosTransactionManager"  /></property>
    <property name="userTransaction"><ref bean="atomikosUserTransaction"  /></property>
  </bean>

  <bean id="transactionHandler"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <description>
    Scope: private
    </description>
    <property name="transactionManager" ref="transactionManager"/>
    <property name="transactionAttributeSource">
      <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
    </property>
  </bean>
  
  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <constructor-arg ref="transactionManager"/>
  </bean>
  
  <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
    <description>
    Scope: private
    
    This template uses session.connection() for data access. See javadocs for
    more info.
    </description>
    <constructor-arg ref="dataSource"/>
  </bean>
  
  <bean id="unsafeJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
    <description>
    Scope: private
    
    This template is "unsafe" since it does not take part Hibernate transactions
    and should only be used in cases where this is beneficial.
    </description>
    <constructor-arg ref="dataSource"/>
  </bean>

  <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>

  <!--
    DATA SOURCES
   -->

  <!-- To re-activate data source testing (see test/ome/server/itests/scalability)
  use the alias with ${dataSource} and define a dataSource property either in
  a configuration file, or directly in your tests via System.setProperty() *before*
  creating the Spring application context. -->
  <!--alias name="${dataSource}" alias="dataSource"/-->
  <alias name="xaDataSource" alias="dataSource"/>
  
  <bean id="loggingDataSource" class="ome.services.util.LoggingDataSource">
    <description>
    Scope: private
    
    Under extreme conditions, c3p0 can run out of connections at which time the
    server can come to a stand still. To catch this situation, the logging
    data source will now print to a special category which can be detected by
    log4j appenders and handled appropriately (sending email, etc.)
    </description>
    <constructor-arg ref="c3p0DataSource"/>
  </bean>
  
  <bean id="c3p0DataSource" lazy-init="true"
     class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <description>
    Scope: private
    </description>
    <property name="driverClass" value="${hibernate.connection.driver_class}"/>
    <property name="jdbcUrl" value="${hibernate.connection.url}"/>
    <property name="user" value="${hibernate.connection.username}"/>
    <property name="password" value="${hibernate.connection.password}"/>
  </bean>

  <!-- Alternative data sources, used for testing -->
  <bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource">
      <property name="driverClassName" value="${hibernate.connection.driver_class}"/>
      <property name="url" value="${hibernate.connection.url}"/>
      <property name="username" value="${hibernate.connection.username}"/>
      <property name="password" value="${hibernate.connection.password}"/>
  </bean>

  <bean id="pgSimpleDataSource" class="org.postgresql.jdbc2.optional.SimpleDataSource">
      <property name="serverName" value="${database.host}"/>
      <property name="databaseName" value="${database.name}"/>
      <property name="user" value="${hibernate.connection.username}"/>
      <property name="password" value="${hibernate.connection.password}"/>
  </bean>

  <bean id="springSingleDataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">
      <property name="driverClassName" value="${hibernate.connection.driver_class}"/>
      <property name="url" value="${hibernate.connection.url}"/>
      <property name="username" value="${hibernate.connection.username}"/>
      <property name="password" value="${hibernate.connection.password}"/>
      <property name="suppressClose" value="true"/>
  </bean>

</beans>
