<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--

	Configuration for services.
	TODO add log4j configuration (e.g. update intervals)
 
-->


<beans>	

<!--	
  Aspects/Interceptors which catch "managed:" calls to our service methods
  =======================================================================
  Possibilities are: tracing, logging, security, transactions, etc.
-->
    
	<bean id="managedService" abstract="true"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interceptorNames">
			<list>
				<value>serviceHandler</value>
				<value>proxyHandler</value>
				<value>transactionHandler</value>
				<value>hibernateHandler</value>
				<value>eventHandler</value>
			</list>
		</property>
	</bean>
	<bean id="managedStatefulService" abstract="true"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interceptorNames">
			<list>
				<value>serviceHandler</value>
				<value>proxyHandler</value>
				<value>transactionHandler</value>
				<value>sessionHandler</value>
				<value>eventHandler</value>
			</list>
		</property>
	</bean>  
	<bean 
		       id="serviceHandler" 
		    class="ome.services.util.ServiceHandler" 
		lazy-init="true">
		<property name="sessionHandler" ref="sessionHandler"/>
	</bean>    

<!--
  Service Levels
  =======================================================================
  Abstract definitions of services which can be used when configuring
  concrete beans. Note: these Spring definitions can have a possibly 
  separate inheritance hierarchy to that defined in Java. When defining
  a parent bean for a concrete service, be sure that all required properties
  are (A) filled by the abstract Spring definition and (B) available on the
  Java class.  
-->
  <bean id="bean" abstract="true">
    <property name="queryFactory"      ref="queryFactory"/>
    <property name="securitySystem"    ref="securitySystem"/>
  </bean>

  <bean id="level1" parent="bean" abstract="true">
    <property name="hibernateTemplate" ref="hibernateTemplate"/>
  </bean>

  <bean id="level2" parent="bean"  abstract="true">
    <property name="updateService" 	ref="internal:ome.api.IUpdate"/>
    <property name="queryService"	ref="internal:ome.api.IQuery"/>	
  </bean>

  <bean id="level3" parent="bean" abstract="true">
    <property name="pixelsService"  ref="internal:ome.api.IPixels"/>
    <property name="pojosService" 	ref="internal:ome.api.IPojos"/>
  </bean>

  <bean name="binary" abstract="true">
    <property name="pixelsMetadata" ref="internal:ome.api.IPixels"/>
    <property name="pixelsData"     ref="/OMERO/Pixels"/>
  </bean>

  <bean name="filesystem"  abstract="true">
    <constructor-arg value="${omero.data.dir}"/>			
  </bean>
  
<!--
  Shared resources
  =======================================================================
-->       
  <bean id="queryFactory" class="ome.services.query.QueryFactory">
    <constructor-arg>
      <list>
		<bean class="ome.services.query.ClassQuerySource"/>
        <bean class="ome.services.query.StringQuerySource"/>
      </list>
    </constructor-arg>
  </bean>
  
</beans>
