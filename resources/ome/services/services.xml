<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--

	Configuration for services.
	TODO add log4j configuration (e.g. update intervals)
 
-->


<beans default-lazy-init="true">	

  <!--	Aspects/Interceptors which catch ALL calls to our service methods
			=================================================================
			Possibilities are: tracing, logging, security, transactions, etc.
	-->
    
	<bean 
  	 			id="internalService" 
	    	class="org.springframework.aop.framework.ProxyFactoryBean"
     abstract="true"
  >
		<property name="interceptorNames">
			<list>
			<value>serviceHandler</value>	
    	</list>
    </property>
	</bean>

 	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- GLOBAL INTERCEPTORS -->	
  
	<bean 
		       id="serviceHandler" 
		    class="ome.services.util.ServiceHandler" 
		lazy-init="true"
	/>    
 	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 
	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				SERVICE LEVEL ONE
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
  <bean id="level1">
		<property name="hibernateTemplate" ref="hibernateTemplate"/>
    <property name="queryFactory"   ref="queryFactory"/>    
  </bean>

  <bean parent="level1" id="ome.api.IAdmin" class="ome.logic.AdminImpl"/> 
  <bean parent="level1" id="ome.api.IQuery" class="ome.logic.QueryImpl"/> 
  <bean parent="level1" id="ome.api.IUpdate" class="ome.logic.UpdateImpl"/>

	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				SERVICE LEVEL TWO
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
  <bean id="level2">
		<property name="updateService" 	ref="ome.api.IUpdate"/>
    <property name="queryService"		ref="ome.api.IQuery"/>	
    <property name="queryFactory"   ref="queryFactory"/>
  </bean>

  <bean parent="level2" id="ome.api.IAnalysis" class="ome.logic.AnalysisImpl"/>
  <bean parent="level2" id="ome.api.IPixels" class="ome.logic.PixelsImpl"/>
  <bean parent="level2" id="ome.api.IPojos" class="ome.logic.PojosImpl"/>
  <bean parent="level2" id="ome.api.ITypes" class="ome.logic.TypesImpl"/>
  
	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				SERVICE LEVEL THREE
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
  <bean id="level3">
    <property name="pixelsService"  ref="ome.api.IPixels"/>
 		<property name="pojosService" 	ref="ome.api.IPojos"/>
  </bean>

	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				FILESYSTEM SERVICES
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
  <bean name="fsService">
		<constructor-arg value="/OME/OMEIS"/>			
  </bean>
  
	<bean name="/OME/OMEIS/Pixels" class="ome.io.nio.PixelsService" 
    parent="fsService"/>
  
  <bean name="/OME/OMEIS/Files"  class="ome.io.nio.OriginalFilesService"
    parent="fsService"/>

  <bean singleton="false"
        id="omeis.providers.re.RenderingEngine" 
     class="omeis.providers.re.RenderingEngineImpl">
      <property name="pixelsMetadata" ref="ome.api.IPixels"/>
      <property name="pixelsData"     ref="/OME/OMEIS/Pixels"/>
  </bean>

	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				PROXIES
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
  
   <!-- 1 -->
  <bean id="adminService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IAdmin"/>
    <property name="target" ref="ome.api.IAdmin"/>
  </bean>  
  <bean id="queryService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IQuery"/>
    <property name="target" ref="ome.api.IQuery"/>
  </bean>  
  <bean id="updateService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IUpdate"/>
    <property name="target" ref="ome.api.IUpdate"/>
  </bean>
  <!-- 2 -->
  <bean id="analysisService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IAnalysis"/>
    <property name="target" ref="ome.api.IAnalysis"/>
  </bean>
  <bean id="pixelsService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IPixels"/>
    <property name="target" ref="ome.api.IPixels"/>
  </bean>
  <bean id="pojosService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.IPojos"/>
    <property name="target" ref="ome.api.IPojos"/>
  </bean>
  <bean id="typesService" parent="internalService">
    <property name="proxyInterfaces" value="ome.api.ITypes"/>
    <property name="target" ref="ome.api.ITypes"/>
  </bean>
  <!-- FS -->
  <bean id="renderService" parent="internalService">
    <property name="proxyInterfaces" value="omeis.providers.re.RenderingEngine"/>
    <property name="target" ref="omeis.providers.re.RenderingEngine"/>
  </bean>

  
	<!-- 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				Helpers
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    -->
       
  <bean id="queryFactory" class="ome.services.query.QueryFactory">
    <constructor-arg>
      <list>
				<bean class="ome.services.query.ClassQuerySource"/>
        <bean class="ome.services.query.StringQuerySource"/>
      </list>
    </constructor-arg>
  </bean>
  
</beans>
