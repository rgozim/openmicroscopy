<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<beans>	

  <description>
    Configuration for Hibernate data access. The beans in this configuration file
    should NOT be generally accessed. In general, this entire file should be
    considered to have a "private" scope. 
  </description>

  <bean id="extendedMetadata" class="ome.tools.hibernate.ExtendedMetadata">
    <description>
    Simple cache for metadata needed throughout the server. Uses the Hibernate
    metamodel to fill the cache during creation. On ContextRefreshedEvent,
    the ExtendedMetadata instance will acquire the SessionFactory from the
    ApplicationContext and assemble its metadata. The SessionFactory cannot
    be injected directly because several security objects depend on the 
    metadata, but they themselves must be injected into the SessionFactory
    for proper functioning. To prevent this circular dependency, we do a
    form of lazy loading.
    </description>
  </bean>

  <bean id="hibernateProperties"
    class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <description>
    Scope: private
    </description>
    <property name="properties">
      <props>
        <prop key="hibernate.transaction.factory_class">org.springframework.orm.hibernate3.SpringTransactionFactory</prop>
        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <prop key="hibernate.connection.driver_class">${hibernate.connection.driver_class}</prop>
        <prop key="hibernate.connection.url">${hibernate.connection.url}</prop>
        <prop key="hibernate.connection.username">${hibernate.connection.username}</prop>
        <prop key="hibernate.connection.password">${hibernate.connection.password}</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
        <prop key="cache.use_query_cache">false</prop>
        <prop key="cache.use_minimal_puts">false</prop>
        <prop key="hibernate.search.default.indexBase">${omero.data.dir}</prop>
        <prop key="hibernate.search.analyzer">${omero.search.analyzer}</prop>
        <prop key="hibernate.c3p0.acquire_increment">${c3p0.acquireIncrement}</prop>
        <prop key="hibernate.c3p0.max_size">${c3p0.maxPoolSize}</prop>
        <prop key="hibernate.c3p0.max_statements">${c3p0.maxStatements}</prop>
        <prop key="hibernate.c3p0.min_size">${c3p0.minPoolSize}</prop>
        <prop key="hibernate.c3p0.timeout">${c3p0.maxIdleTime}</prop><!-- seconds -->
        <prop key="hibernate.c3p0.idle_test_period">${c3p0.idleConnectionTestPeriod}</prop> <!-- seconds -->
      </props>
    </property>
  </bean>

  <!-- Scope: private -->

  <!-- Used here to inject a value into the parent ome.model context
  which is available to all model objects. -->
  <bean class="ome.util.MapPut" lazy-init="false">
    <property name="map" ref="bridges"/>
    <property name="key" value="fieldBridges"/>
    <property name="object" ref="fullTextIndexer"/>
  </bean>
  
  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <constructor-arg ref="transactionManager"/>
  </bean>
  
  <bean id="proxyHandler" class="ome.tools.hibernate.ProxyCleanupFilter$Interceptor">
    <description>
    Scope: private
    </description>
    <property name="sessionHandler" ref="sessionHandler"/>
  </bean>
  
  <bean id="sessionHandler" class="ome.tools.hibernate.SessionHandler">
    <description>
    Scope: private
    
    The session handler is used to handle sessions for stateful beans. A single
    session is opened for any new stateful session invocation, and will be closed
    once "close()" is invoked.
    </description>
    <constructor-arg ref="sessionFactory"/>    
  </bean>

  <bean id="hibernateHandler" class="org.springframework.orm.hibernate3.HibernateInterceptor">
    <description>
    Scope: private
    </description>
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="hibernateTemplate" class="ome.tools.spring.ManualFlushHibernateTemplate">
    <description>
    Scope: private
    </description>
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="allowCreate" value="false"/>
  </bean>

  <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
    <description>
    Scope: private
    
    This template uses session.connection() for data access. See javadocs for
    more info.
    </description>
    <constructor-arg ref="dataSource"/>
  </bean>
  
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <description>
    Scope: private
    Note:  many of the references for the sessionFactory are defined in 
           security.xml
    </description>
    <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
    <property name="hibernateProperties" ref="hibernateProperties"/>
    <property name="dataSource" ref="dataSource"/>
    <property name="entityInterceptor" ref="omeroInterceptor"/>
    <property name="eventListeners" ref="eventListeners"/>
	<property name="filterDefinitions">
		<list>
			<ref bean="securityFilter"/>
		</list>
	</property>
    <property name="jtaTransactionManager">
        <bean id="transactionManager.transactionManager" class="org.springframework.beans.factory.config.PropertyPathFactoryBean"/>
    </property>
  </bean>

</beans>
