<?xml version="1.0" encoding="UTF-8"?>
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
 
  security.xml defines the interceptors for all methods which need
  authentication and authorization.
	
  TODO : refactor so security can be turned on or off by omitting this file. 
	     currently services.xml shouldn't really have a dependency on this file.
	     or a no-security.xml

-->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN/EN" "http://www.springframework.org/dtd/spring-beans.dtd" >
<beans>

    <!-- ============== INTERCEPTOR =========== -->
	<bean id="serviceSecurity"
		class="net.sf.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="validateConfigAttributes"><value>true</value></property>
		<property name="authenticationManager"><ref bean="authenticationManager"/></property>
		<property name="accessDecisionManager"><ref bean="accessDecisionManager"/></property>
<!--
		<property name="runAsManager"><ref bean="runAsManager"/></property>
		<property name="afterInvocationManager"><ref bean="afterInvocationManager"/></property>
-->
		<property name="objectDefinitionSource">
			<value>
				ome.api.HierarchyBrowsing.*=ROLE_ANONYMOUS
				ome.api.Write.*=ROLE_ADMIN
			</value>
		</property>
	</bean>

	<bean id="memoryAuthenticationDao" class="net.sf.acegisecurity.providers.dao.memory.InMemoryDaoImpl">
	    <property name="userMap">
	        <value>
				josh=jmoore1,ROLE_USER
	            admin=secretx,ROLE_USER,ROLE_ADMIN
	        </value>
	    </property>
	</bean>

    <bean id="jdbcAuthenticationDao" class="ome.security.AuthenticationDao">
<!--class="net.sf.acegisecurity.providers.dao.jdbc.JdbcDaoImpl">-->
        <property name="dataSource" ref="dataSource"/>
        <property name="usersByUsernameQuery">
            <value>SELECT ome_name as username,password,'true' as enabled FROM experimenters WHERE ome_name = ?</value>
        </property>
        <property name="authoritiesByUsernameQuery">
            <value>SELECT ome_name as username, 'ROLE_USER' as role_name FROM experimenters WHERE ome_name = ?</value>
        </property>
    </bean>
	
    <!-- ============== ACCESS =========== -->

	<bean id="roleVoter" class="net.sf.acegisecurity.vote.RoleVoter">
        <property name="rolePrefix" value="ROLE_"/>
	</bean>
	

	<bean id="accessDecisionManager" class="net.sf.acegisecurity.vote.UnanimousBased">
	    <property name="allowIfAllAbstainDecisions">
	        <value>false</value>
	    </property>
	    <property name="decisionVoters">
	        <list>
	           <ref local="roleVoter"/>
	        </list>
	    </property>
	</bean>

   <!-- ============== ANONYMOUS USER =========== -->
	
	<bean id="anonymousProcessingFilter" class="net.sf.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
  		<property name="key"><value>ome_foobar</value></property>
  		<property name="userAttribute"><value>anonymousUser,ROLE_ANONYMOUS</value></property>
	</bean>

	<bean id="anonymousAuthenticationProvider" class="net.sf.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
  		<property name="key"><value>ome_foobar</value></property>
	</bean>
	

   <!-- ============== "AFTER INTERCEPTION" AUTHORIZATION DEFINITIONS =========== -->

<!--   <bean id="afterQueryFilter" class="org.openmicroscopy.TODO">
   
   <bean id="afterInvocationManager" class="net.sf.acegisecurity.afterinvocation.AfterInvocationProviderManager">
      <property name="providers">
         <list>
            <ref local="afterQueryFilter"/> -
         </list>
      </property>
   </bean>
-->
   <!-- ============== AUTHENTICATION =========== -->
   
	<bean id="basicProcessingFilter" class="net.sf.acegisecurity.ui.basicauth.BasicProcessingFilter">
		<property name="authenticationManager"><ref bean="authenticationManager"/></property>
		<property name="authenticationEntryPoint"><ref bean="authenticationEntryPoint"/></property>
	</bean>

	<bean id="authenticationEntryPoint"
		class="net.sf.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
		<property name="realmName"><value>Name Of Your Realm</value></property>
	</bean>

	<bean id="daoAuthenticationProvider" class="net.sf.acegisecurity.providers.dao.PasswordDaoAuthenticationProvider">
<!--class="net.sf.acegisecurity.providers.dao.DaoAuthenticationProvider">-->
		<!-- FIXME Add Password Encoder -->
		<!-- TODO
Event Publishing:
The DaoAuthenticationProvider automatically obtains the ApplicationContext it is running in at startup time. 
This allows the provider to publish events through the standard Spring event framework. Three types of event messages are published:
Who's on line? on AuthenticationSuccessEvent with JMS
			TODO
			1.6.8. Concurrent Session Support
			-->
	     <property name="passwordAuthenticationDao">
	         <ref local="jdbcAuthenticationDao"/>
	     </property>
	</bean>
	
	<bean id="authenticationManager" class="net.sf.acegisecurity.providers.ProviderManager">
	    <property name="providers">
	        <list>
	            <ref bean="daoAuthenticationProvider"/>
	            <ref bean="anonymousAuthenticationProvider"/>
	        </list>
	    </property>
	</bean>

   <!-- ======================== FILTER CHAIN ======================= -->

	<!--  if you wish to use channel security, add "channelProcessingFilter," in front
	      of "httpSessionContextIntegrationFilter" in the list below -->
	<bean id="filterChainProxy" class="net.sf.acegisecurity.util.FilterChainProxy">
      <property name="filterInvocationDefinitionSource">
         <value>
		    CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
		    PATTERN_TYPE_APACHE_ANT
            /**=httpSessionContextIntegrationFilter,basicProcessingFilter,anonymousProcessingFilter
         </value>
      </property>
    </bean>
<!-- WAS
/**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,basicProcessingFilter,rememberMeProcessingFilter,anonymousProcessingFilter,securityEnforcementFilter
-->

   <bean id="httpSessionContextIntegrationFilter" class="net.sf.acegisecurity.context.HttpSessionContextIntegrationFilter">
      <property name="context"><value>net.sf.acegisecurity.context.security.SecureContextImpl</value></property>
   </bean>

</beans>
