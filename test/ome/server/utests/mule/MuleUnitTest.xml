<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2007 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<beans>

	<bean id="applicationEventMulticaster"
		class="org.mule.extras.spring.events.MuleEventMulticaster">
		<property name="asynchronous">
			<value>false</value>
		</property>
	</bean>

	<bean id="simpleListener"
		class="ome.server.utests.mule.MuleListener" />

	<bean id="muleManager"
		class="org.mule.extras.spring.config.AutowireUMOManagerFactoryBean"
		destroy-method="dispose" singleton="true" />

	<!-- Used to set mule object names to their corresponding bean id -->
	<bean id="muleNameProcessor"
		class="org.mule.extras.spring.config.MuleObjectNameProcessor" />

	<!-- The mule client we will use to send events to the mule server -->
	<bean id="muleClient" class="org.mule.extras.client.MuleClient"
		depends-on="muleManager" />

	<!--
		An interceptor is a peice of code that can be configued to execute
		before and/or after an event is received for a component.
		You can define a stack of interceptors that will be executed in sequence.
		You can then configure the stack on your components.
		Note the interceptor stack must not be a singleton.  Each component needs its
		own copy of an interceptor stack.Th
	-->
	<bean id="defaultInterceptorStack" singleton="false"
		class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<bean id="loggingInterceptor"
					class="org.mule.interceptors.LoggingInterceptor" />
				<bean id="timerInterceptor"
					class="org.mule.interceptors.TimerInterceptor" />
			</list>
		</constructor-arg>
	</bean>

	<!--
		A Mule descriptor defines all the necessary information about how your components will
		interact with the framework, other components in the system and external sources.
		Please refer to the Configuration Guide for a full description of all the parameters.
	-->
	<bean id="simpleUMO" class="org.mule.impl.MuleDescriptor">
		<property name="inboundEndpoint">
			<bean class="org.mule.impl.endpoint.MuleEndpoint">
				<property name="endpointURI">
					<bean
						class="org.mule.impl.endpoint.MuleEndpointURI">
						<constructor-arg>
							<value>
								vm://simpleUMO
							</value>
						</constructor-arg>
					</bean>
				</property>
			</bean>
		</property>
		<property name="implementation">
			<value>umoService</value>
		</property>
		<!--
			Here we tell this component to use the interceptor stack defined above
		-->
		<property name="interceptors">
			<ref local="defaultInterceptorStack" />
		</property>
	</bean>

	<bean id="xmppEcho" class="org.mule.impl.MuleDescriptor">
		<property name="inboundEndpoint">
			<bean class="org.mule.impl.endpoint.MuleEndpoint">
				<property name="endpointURI">
					<bean
						class="org.mule.impl.endpoint.MuleEndpointURI">
						<constructor-arg>
							<value>
								xmpp://OMERO:OMERO4thewinwin@jabber.org:5222/
							</value>
						</constructor-arg>
					</bean>
				</property>
			</bean>
		</property>
		<property name="implementation">
			<bean class="org.mule.components.simple.BridgeComponent"/>
		</property>
	</bean>

	<bean id="umoService" class="ome.server.utests.mule.Service"/>
	<!-- 
	<bean id="xmppService" class="ome.server.utests.mule.XmppService"/>
	
	<bean id="XmppToString" singleton="false" class="org.mule.providers.xmpp.transformers.XmppPacketToString">
        <property name="returnClass" value="java.lang.String"/>
    </bean>
    
    <bean id="xmppConsole" class="org.mule.impl.MuleDescriptor">
		<property name="implementation" ref="xmppService"/>
		<property name="inboundEndpoint">
			<bean class="org.mule.impl.endpoint.MuleEndpoint">
				<property name="endpointURI">
					<bean
						class="org.mule.impl.endpoint.MuleEndpointURI">
						<constructor-arg>
							<value>
								xmpp://OMERO:OMERO4thewinwin@jabber.org:5222/?transformers=XmppToString
							</value>
						</constructor-arg>
					</bean>
				</property>
			</bean>NEED ROUTERS AND JABBER WORKING.
		</property>
		<property name="outboundEndpoint">
			<bean class="org.mule.impl.endpoint.MuleEndpoint">
				<property name="endpointURI">
					<bean
						class="org.mule.impl.endpoint.MuleEndpointURI">
						<constructor-arg>
							<value>
								xmpp://OMERO:OMERO4thewinwin@jabber.org:5222/?transformers=XmppToString
							</value>
						</constructor-arg>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	-->
</beans>
