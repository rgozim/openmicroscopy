$c2j.getPackageDeclaration($clazz)

###########################################################
## <CustomCode>
###########################################################
import ome.util.BaseModelUtils;
###########################################################
## </CustomCode>
###########################################################


#if($ejb3) 
import javax.ejb.*;	
import javax.persistence.*;
#end
import java.util.*;

$c2j.addExtraImports($clazz,$ctx)
$secondpassclassimports

/**
$c2j.getClassJavaDoc($clazz, $render.eval($ctx, "$c2j.getDeclarationName($clazz) generated by hbm2java"),0)
 */
#if($ejb3)
@Entity
@Table(name="$clazz.table.name"
#if ($clazz.table.schema)
    ,schema="$clazz.table.schema"
#end
#if ($clazz.table.catalog)
    ,catalog="$clazz.table.catalog"
#end
)
#end
$c2j.getClassModifiers($clazz) $c2j.getDeclarationType($clazz)
$c2j.getDeclarationName($clazz) $c2j.getExtendsDeclaration($clazz)
$c2j.getImplementsDeclaration($clazz) ,
###########################################################
## <CustomCode>
###########################################################
ome.api.OMEModel {
###########################################################
## </CustomCode>
###########################################################

#if(!$c2j.isInterface($clazz))
    // Fields    

#foreach($field in $c2j.getAllPropertiesIterator($clazz))
 #if($c2j.hasMeta($field, "field-description"))
    /**
     $c2j.getFieldJavaDoc($field,0)
     */
 #end
    $c2j.getFieldModifiers($field) $c2j.stripPackage( $c2j.getJavaTypeName($field, $generics), $clazz ) $field.name;
#end


    // Constructors

    /** default constructor */
    public $c2j.getDeclarationName($clazz)() {
    }
    
#if($clazz.hasIdentifierProperty() && !$clazz.getSuperclass())    
    /** constructor with id */
    public $c2j.getDeclarationName($clazz)($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) $clazz.identifierProperty.name) {
        this.$clazz.identifierProperty.name = $clazz.identifierProperty.name;
    }
#end
   
    
##    /** full constructor */
##    public $c2j.getDeclarationName($clazz)($c2j.asParameterList($c2j.getPropertyClosureForFullConstructor($clazz))) {
###if(!$c2j.getPropertyClosureForSuperclassFullConstructor($clazz).isEmpty()) 
##        super($c2j.asArgumentList($c2j.getPropertyClosureForSuperclassFullConstructor($clazz)));        
###end
###foreach($field in $c2j.getPropertiesForFullConstructor($clazz))  
##        this.$field.Name = $field.Name;
###end
##    }
    
## NYI: minimal constructor

    // Property accessors
#foreach($property in $c2j.getAllPropertiesIterator($clazz))

    /**
     * $c2j.toJavaDoc($c2j.getMetaAsString($property, "field-description"),4)
     */
## if this is the id property (getter)
#if ($ejb3)
 #if ($clazz.hasIdentifierProperty())
  #if($property.equals($clazz.identifierProperty))
      @Id(generate = GeneratorType.AUTO)
## explicitly set the column name for this property
    #end
   #end
#if($c2h.isManyToOne($property))
 @ManyToOne
 #foreach($column in $property.columnIterator)
  @JoinColumn(name = "$column.name")
 #end
#elseif($c2h.isOneToMany($property))
 @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
#foreach($column in $property.value.key.columnIterator)
  @JoinColumn(name = "$column.name")
#end
#else
 #foreach($column in $property.columnIterator)
  @Column(name = "$column.name")
 #end
#end
#end
    $c2j.getPropertyGetModifiers($property) $c2j.stripPackage( $c2j.getJavaTypeName($property, $generics), $clazz ) $c2j.getGetterSignature($property)() {
        return this.$property.name;
    }
    
    $c2j.getPropertySetModifiers($property) void set$c2j.getPropertyName($property)($c2j.stripPackage( $c2j.getJavaTypeName($property, $generics), $clazz) $property.Name) {
        this.$property.Name = $property.Name;
    }
#end

#if($c2j.needsEqualsHashCode($clazz) && !$clazz.Superclass)
   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof $c2j.getDeclarationName($clazz)) ) return false;
		 $c2j.getDeclarationName($clazz) castOther = ( $c2j.getDeclarationName($clazz) ) other; 
         
		 return $c2j.generateEquals($clazz, "this", "castOther");
   }
   
   public int hashCode() {
         int result = 17;
         
#foreach($property in $c2j.getAllPropertiesIterator($clazz))	
         $c2j.generateHashCode($property, "result", "this");
#end
         return result;
   }   
#end

#else ## if interface
    ## Property accessors for interface
#foreach($property in $c2j.getAllPropertiesIterator($clazz))	
   /**
   $c2j.toJavaDoc($c2j.getMetaAsString($property, "field-description"),4) */
   $c2j.getPropertyGetModifiers($property) $c2j.stripPackage( $c2j.getJavaTypeName($property), $clazz ) $c2j.getGetterSignature($property)();
    
   $c2j.getPropertySetModifiers($property) void set$c2j.getPropertyName($property)($c2j.stripPackage( $c2j.getJavaTypeName($property), $clazz ) $property.Name);
#end
#end

#if($c2j.hasMetaAttribute($clazz,"class-code"))
  // The following is extra code specified in the hbm.xml files
$c2j.getExtraCode($clazz)
  // end of extra code specified in the hbm.xml files
#end


###########################################################
## <CustomCode>
###########################################################
	/** utility methods. Container may re-assign this. */	
	protected static BaseModelUtils _utils = 
		new BaseModelUtils();
	public BaseModelUtils getUtils(){
		return _utils;
	}
	public void setUtils(BaseModelUtils utils){
		_utils = utils;
	}
##parse( "$clazz.vm" )
###########################################################
## </CustomCode>
###########################################################



}
