#set( $meta      = $sessions.getClassMetadata($class))
#set( $FullClass = $meta.getEntityName() )
#set( $ObjClass  = $task.nopkg( $FullClass ) )
#set( $Class     = "${ObjClass}Utils" )
#macro(debug $klass $property)
#if(true)
         if (log.isDebugEnabled()){
             log.debug("Set ${klass}.${property} to null");
         }
#end
#end
/*
 * org.openmicroscopy.omero.dao.utils.${Class}
 *
 *------------------------------------------------------------------------------
 *
 *  Copyright (C) 2005 Open Microscopy Environment
 *      Massachusetts Institute of Technology,
 *      National Institutes of Health,
 *      University of Dundee
 *
 *
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *------------------------------------------------------------------------------
 */

package org.openmicroscopy.omero.dao.utils;

//Java imports
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

//Third-party libraries
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Hibernate;

//Application-internal dependencies
import org.openmicroscopy.omero.BaseModelUtils;
import org.openmicroscopy.omero.model.${ObjClass};

/**
 *  
 * @author  GENERATED CODE
 * @version 1.0
 * <small>
 * (<b>Internal version:</b> $Revision: $ $Date: $)
 * </small>
 * @since 1.0
 */

public class ${Class}  extends BaseModelUtils {

  private static Log log = LogFactory.getLog(${Class}.class);

##foreach( $p in $meta.get($c).getPropertyNames() )
##${p}-->$meta.get($c).getPropertyType($p)
##	Type: $meta.get($c).getPropertyType($p).getReturnedClass()
## 	Coll: $meta.get($c).getPropertyType($p).isCollectionType() 

  public void clean(Object o){
    clean(o,new HashSet());
  }

  public void clean(Object o, Set done){

    // Enter each object-indexed clean only once
    if (done.contains(o)){
        return;
    }
    done.add(o);
  
    $ObjClass self = ($ObjClass) o;
#foreach( $p in $meta.getPropertyNames() )
#set( $Type = $meta.getPropertyType($p) )
#set( $Target = $Type.getReturnedClass().getName())
#set( $setP = "set${strings.capitalizeFirstLetter($p)}")
#set( $getP = "get${strings.capitalizeFirstLetter($p)}")
#if( $Type.isCollectionType() )
#set( $Role = $Type.getRole() )
#set( $collection = $sessions.getCollectionMetadata($Role) )
#set( $ElementType = $collection.getElementType())
#set( $ElementClass = $ElementType.getReturnedClass().getName() )

	// Type: $Type
    // Cleaning $Target::$p set (Role: $Role)

	$Type from$getP = null;
	try { 
		from$getP = self.$getP();
	} catch () {
		// Failed. Leave null and "do nothing" below.
	}
	
	if (null==from$getP){
      // Do nothing
    } else if (!Hibernate.isInitialized(from$getP)){
      self.$setP(null);
#debug($ObjClass $p)
    } else {
      for (Iterator it = from$getP.iterator(); it.hasNext();){
      	 //$ElementType
      	 //$ElementClass
         (new ${ElementClass}()).getUtils().clean(it.next(),done);
      }
    }
#end
#if( $Target.startsWith("org.openmicroscopy.omero"))
    // Cleaning $Target::$p field
    if (null==self.$getP()){
      // Do nothing
    } else if (!Hibernate.isInitialized(self.$getP())){
      self.$setP(null);
#debug($ObjClass $p)      
    } else {
      (new ${Target}()).getUtils().clean(self.$getP(),done);
    }
#end
#end
  }


}
