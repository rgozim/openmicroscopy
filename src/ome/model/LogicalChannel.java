package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * LogicalChannel generated by hbm2java
 */
public class
LogicalChannel 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer attributeId;
     private String photometricInterpretation;
     private String mode;
     private Float auxLightAttenuation;
     private Integer exWave;
     private Float detectorOffset;
     private String auxTechnique;
     private String fluor;
     private String contrastMethod;
     private Float detectorGain;
     private String name;
     private Integer samplesPerPixel;
     private Float lightAttenuation;
     private Integer emWave;
     private Integer auxLightWavelength;
     private String illuminationType;
     private Float ndFilter;
     private Integer pinholeSize;
     private Integer lightWavelength;
     private Set channelComponents;
     private Image image;
     private ModuleExecution moduleExecution;


    // Constructors

    /** default constructor */
    public LogicalChannel() {
    }
    
    /** constructor with id */
    public LogicalChannel(Integer attributeId) {
        this.attributeId = attributeId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getAttributeId() {
        return this.attributeId;
    }
    
    public void setAttributeId(Integer attributeId) {
        this.attributeId = attributeId;
    }

    /**
     * 
     */
    public String getPhotometricInterpretation() {
        return this.photometricInterpretation;
    }
    
    public void setPhotometricInterpretation(String photometricInterpretation) {
        this.photometricInterpretation = photometricInterpretation;
    }

    /**
     * 
     */
    public String getMode() {
        return this.mode;
    }
    
    public void setMode(String mode) {
        this.mode = mode;
    }

    /**
     * 
     */
    public Float getAuxLightAttenuation() {
        return this.auxLightAttenuation;
    }
    
    public void setAuxLightAttenuation(Float auxLightAttenuation) {
        this.auxLightAttenuation = auxLightAttenuation;
    }

    /**
     * 
     */
    public Integer getExWave() {
        return this.exWave;
    }
    
    public void setExWave(Integer exWave) {
        this.exWave = exWave;
    }

    /**
     * 
     */
    public Float getDetectorOffset() {
        return this.detectorOffset;
    }
    
    public void setDetectorOffset(Float detectorOffset) {
        this.detectorOffset = detectorOffset;
    }

    /**
     * 
     */
    public String getAuxTechnique() {
        return this.auxTechnique;
    }
    
    public void setAuxTechnique(String auxTechnique) {
        this.auxTechnique = auxTechnique;
    }

    /**
     * 
     */
    public String getFluor() {
        return this.fluor;
    }
    
    public void setFluor(String fluor) {
        this.fluor = fluor;
    }

    /**
     * 
     */
    public String getContrastMethod() {
        return this.contrastMethod;
    }
    
    public void setContrastMethod(String contrastMethod) {
        this.contrastMethod = contrastMethod;
    }

    /**
     * 
     */
    public Float getDetectorGain() {
        return this.detectorGain;
    }
    
    public void setDetectorGain(Float detectorGain) {
        this.detectorGain = detectorGain;
    }

    /**
     * 
     */
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 
     */
    public Integer getSamplesPerPixel() {
        return this.samplesPerPixel;
    }
    
    public void setSamplesPerPixel(Integer samplesPerPixel) {
        this.samplesPerPixel = samplesPerPixel;
    }

    /**
     * 
     */
    public Float getLightAttenuation() {
        return this.lightAttenuation;
    }
    
    public void setLightAttenuation(Float lightAttenuation) {
        this.lightAttenuation = lightAttenuation;
    }

    /**
     * 
     */
    public Integer getEmWave() {
        return this.emWave;
    }
    
    public void setEmWave(Integer emWave) {
        this.emWave = emWave;
    }

    /**
     * 
     */
    public Integer getAuxLightWavelength() {
        return this.auxLightWavelength;
    }
    
    public void setAuxLightWavelength(Integer auxLightWavelength) {
        this.auxLightWavelength = auxLightWavelength;
    }

    /**
     * 
     */
    public String getIlluminationType() {
        return this.illuminationType;
    }
    
    public void setIlluminationType(String illuminationType) {
        this.illuminationType = illuminationType;
    }

    /**
     * 
     */
    public Float getNdFilter() {
        return this.ndFilter;
    }
    
    public void setNdFilter(Float ndFilter) {
        this.ndFilter = ndFilter;
    }

    /**
     * 
     */
    public Integer getPinholeSize() {
        return this.pinholeSize;
    }
    
    public void setPinholeSize(Integer pinholeSize) {
        this.pinholeSize = pinholeSize;
    }

    /**
     * 
     */
    public Integer getLightWavelength() {
        return this.lightWavelength;
    }
    
    public void setLightWavelength(Integer lightWavelength) {
        this.lightWavelength = lightWavelength;
    }

    /**
     * 
     */
    public Set getChannelComponents() {
        return this.channelComponents;
    }
    
    public void setChannelComponents(Set channelComponents) {
        this.channelComponents = channelComponents;
    }

    /**
     * 
     */
    public Image getImage() {
        return this.image;
    }
    
    public void setImage(Image image) {
        this.image = image;
    }

    /**
     * 
     */
    public ModuleExecution getModuleExecution() {
        return this.moduleExecution;
    }
    
    public void setModuleExecution(ModuleExecution moduleExecution) {
        this.moduleExecution = moduleExecution;
    }





	/** utility methods. Container may re-assign this. */	
	protected static ome.util.BaseModelUtils _utils = 
		new ome.util.BaseModelUtils();
	public BaseModelUtils getUtils(){
		return _utils;
	}
	public void setUtils(BaseModelUtils utils){
		_utils = utils;
	}

  public boolean acceptFilter(Filter filter){


	  // Visiting: AttributeId ------------------------------------------
	  Integer _AttributeId = null;
	  try {
	     _AttributeId = getAttributeId();
	  } catch (Exception e) {
		 setAttributeId(null);
	  }
// TODO catch class cast?
	  setAttributeId((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):AttributeId",_AttributeId)); 

	  // Visiting: PhotometricInterpretation ------------------------------------------
	  String _PhotometricInterpretation = null;
	  try {
	     _PhotometricInterpretation = getPhotometricInterpretation();
	  } catch (Exception e) {
		 setPhotometricInterpretation(null);
	  }
// TODO catch class cast?
	  setPhotometricInterpretation((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):PhotometricInterpretation",_PhotometricInterpretation)); 

	  // Visiting: Mode ------------------------------------------
	  String _Mode = null;
	  try {
	     _Mode = getMode();
	  } catch (Exception e) {
		 setMode(null);
	  }
// TODO catch class cast?
	  setMode((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):Mode",_Mode)); 

	  // Visiting: AuxLightAttenuation ------------------------------------------
	  Float _AuxLightAttenuation = null;
	  try {
	     _AuxLightAttenuation = getAuxLightAttenuation();
	  } catch (Exception e) {
		 setAuxLightAttenuation(null);
	  }
// TODO catch class cast?
	  setAuxLightAttenuation((Float) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):AuxLightAttenuation",_AuxLightAttenuation)); 

	  // Visiting: ExWave ------------------------------------------
	  Integer _ExWave = null;
	  try {
	     _ExWave = getExWave();
	  } catch (Exception e) {
		 setExWave(null);
	  }
// TODO catch class cast?
	  setExWave((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):ExWave",_ExWave)); 

	  // Visiting: DetectorOffset ------------------------------------------
	  Float _DetectorOffset = null;
	  try {
	     _DetectorOffset = getDetectorOffset();
	  } catch (Exception e) {
		 setDetectorOffset(null);
	  }
// TODO catch class cast?
	  setDetectorOffset((Float) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):DetectorOffset",_DetectorOffset)); 

	  // Visiting: AuxTechnique ------------------------------------------
	  String _AuxTechnique = null;
	  try {
	     _AuxTechnique = getAuxTechnique();
	  } catch (Exception e) {
		 setAuxTechnique(null);
	  }
// TODO catch class cast?
	  setAuxTechnique((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):AuxTechnique",_AuxTechnique)); 

	  // Visiting: Fluor ------------------------------------------
	  String _Fluor = null;
	  try {
	     _Fluor = getFluor();
	  } catch (Exception e) {
		 setFluor(null);
	  }
// TODO catch class cast?
	  setFluor((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):Fluor",_Fluor)); 

	  // Visiting: ContrastMethod ------------------------------------------
	  String _ContrastMethod = null;
	  try {
	     _ContrastMethod = getContrastMethod();
	  } catch (Exception e) {
		 setContrastMethod(null);
	  }
// TODO catch class cast?
	  setContrastMethod((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):ContrastMethod",_ContrastMethod)); 

	  // Visiting: DetectorGain ------------------------------------------
	  Float _DetectorGain = null;
	  try {
	     _DetectorGain = getDetectorGain();
	  } catch (Exception e) {
		 setDetectorGain(null);
	  }
// TODO catch class cast?
	  setDetectorGain((Float) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):DetectorGain",_DetectorGain)); 

	  // Visiting: Name ------------------------------------------
	  String _Name = null;
	  try {
	     _Name = getName();
	  } catch (Exception e) {
		 setName(null);
	  }
// TODO catch class cast?
	  setName((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):Name",_Name)); 

	  // Visiting: SamplesPerPixel ------------------------------------------
	  Integer _SamplesPerPixel = null;
	  try {
	     _SamplesPerPixel = getSamplesPerPixel();
	  } catch (Exception e) {
		 setSamplesPerPixel(null);
	  }
// TODO catch class cast?
	  setSamplesPerPixel((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):SamplesPerPixel",_SamplesPerPixel)); 

	  // Visiting: LightAttenuation ------------------------------------------
	  Float _LightAttenuation = null;
	  try {
	     _LightAttenuation = getLightAttenuation();
	  } catch (Exception e) {
		 setLightAttenuation(null);
	  }
// TODO catch class cast?
	  setLightAttenuation((Float) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):LightAttenuation",_LightAttenuation)); 

	  // Visiting: EmWave ------------------------------------------
	  Integer _EmWave = null;
	  try {
	     _EmWave = getEmWave();
	  } catch (Exception e) {
		 setEmWave(null);
	  }
// TODO catch class cast?
	  setEmWave((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):EmWave",_EmWave)); 

	  // Visiting: AuxLightWavelength ------------------------------------------
	  Integer _AuxLightWavelength = null;
	  try {
	     _AuxLightWavelength = getAuxLightWavelength();
	  } catch (Exception e) {
		 setAuxLightWavelength(null);
	  }
// TODO catch class cast?
	  setAuxLightWavelength((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):AuxLightWavelength",_AuxLightWavelength)); 

	  // Visiting: IlluminationType ------------------------------------------
	  String _IlluminationType = null;
	  try {
	     _IlluminationType = getIlluminationType();
	  } catch (Exception e) {
		 setIlluminationType(null);
	  }
// TODO catch class cast?
	  setIlluminationType((String) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):IlluminationType",_IlluminationType)); 

	  // Visiting: NdFilter ------------------------------------------
	  Float _NdFilter = null;
	  try {
	     _NdFilter = getNdFilter();
	  } catch (Exception e) {
		 setNdFilter(null);
	  }
// TODO catch class cast?
	  setNdFilter((Float) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):NdFilter",_NdFilter)); 

	  // Visiting: PinholeSize ------------------------------------------
	  Integer _PinholeSize = null;
	  try {
	     _PinholeSize = getPinholeSize();
	  } catch (Exception e) {
		 setPinholeSize(null);
	  }
// TODO catch class cast?
	  setPinholeSize((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):PinholeSize",_PinholeSize)); 

	  // Visiting: LightWavelength ------------------------------------------
	  Integer _LightWavelength = null;
	  try {
	     _LightWavelength = getLightWavelength();
	  } catch (Exception e) {
		 setLightWavelength(null);
	  }
// TODO catch class cast?
	  setLightWavelength((Integer) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):LightWavelength",_LightWavelength)); 

	  // Visiting: ChannelComponents ------------------------------------------
	  Set _ChannelComponents = null;
	  try {
	     _ChannelComponents = getChannelComponents();
	  } catch (Exception e) {
		 setChannelComponents(null);
	  }
// TODO catch class cast?
	  setChannelComponents((Set) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):ChannelComponents",_ChannelComponents)); 

	  // Visiting: Image ------------------------------------------
	  Image _Image = null;
	  try {
	     _Image = getImage();
	  } catch (Exception e) {
		 setImage(null);
	  }
// TODO catch class cast?
	  setImage((Image) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):Image",_Image)); 

	  // Visiting: ModuleExecution ------------------------------------------
	  ModuleExecution _ModuleExecution = null;
	  try {
	     _ModuleExecution = getModuleExecution();
	  } catch (Exception e) {
		 setModuleExecution(null);
	  }
// TODO catch class cast?
	  setModuleExecution((ModuleExecution) filter.filter("org.hibernate.mapping.RootClass(ome.model.LogicalChannel):ModuleExecution",_ModuleExecution)); 
   	 return true;
  }
  
  public String toString(){
	return "LogicalChannel"+(attributeId==null ? ":Hash"+this.hashCode() : ":"+attributeId);
  }
  


}
