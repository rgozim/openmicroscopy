package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * DatasetAnnotation generated by hbm2java
 */
public class
DatasetAnnotation 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer attributeId;
     private String content;
     private Boolean valid;
     private Dataset dataset;
     private ModuleExecution moduleExecution;


    // Constructors

    /** default constructor */
    public DatasetAnnotation() {
    }
    
    /** constructor with id */
    public DatasetAnnotation(Integer attributeId) {
        this.attributeId = attributeId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getAttributeId() {
        return this.attributeId;
    }
    
    public void setAttributeId(Integer attributeId) {
        this.attributeId = attributeId;
    }

    /**
     * 
     */
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * 
     */
    public Boolean getValid() {
        return this.valid;
    }
    
    public void setValid(Boolean valid) {
        this.valid = valid;
    }

    /**
     * 
     */
    public Dataset getDataset() {
        return this.dataset;
    }
    
    public void setDataset(Dataset dataset) {
        this.dataset = dataset;
    }

    /**
     * 
     */
    public ModuleExecution getModuleExecution() {
        return this.moduleExecution;
    }
    
    public void setModuleExecution(ModuleExecution moduleExecution) {
        this.moduleExecution = moduleExecution;
    }






  public boolean acceptFilter(Filter filter){


	  // Visiting: AttributeId ------------------------------------------
	  Integer _AttributeId = null;
	  try {
	     _AttributeId = getAttributeId();
	  } catch (Exception e) {
		 setAttributeId(null);
	  }
// TODO catch class cast?
	  setAttributeId((Integer) filter.filter(ATTRIBUTEID,_AttributeId)); 

	  // Visiting: Content ------------------------------------------
	  String _Content = null;
	  try {
	     _Content = getContent();
	  } catch (Exception e) {
		 setContent(null);
	  }
// TODO catch class cast?
	  setContent((String) filter.filter(CONTENT,_Content)); 

	  // Visiting: Valid ------------------------------------------
	  Boolean _Valid = null;
	  try {
	     _Valid = getValid();
	  } catch (Exception e) {
		 setValid(null);
	  }
// TODO catch class cast?
	  setValid((Boolean) filter.filter(VALID,_Valid)); 

	  // Visiting: Dataset ------------------------------------------
	  Dataset _Dataset = null;
	  try {
	     _Dataset = getDataset();
	  } catch (Exception e) {
		 setDataset(null);
	  }
// TODO catch class cast?
	  setDataset((Dataset) filter.filter(DATASET,_Dataset)); 

	  // Visiting: ModuleExecution ------------------------------------------
	  ModuleExecution _ModuleExecution = null;
	  try {
	     _ModuleExecution = getModuleExecution();
	  } catch (Exception e) {
		 setModuleExecution(null);
	  }
// TODO catch class cast?
	  setModuleExecution((ModuleExecution) filter.filter(MODULEEXECUTION,_ModuleExecution)); 
   	 return true;
  }
  
  public String toString(){
	return "DatasetAnnotation"+(attributeId==null ? ":Hash_"+this.hashCode() : ":Id_"+attributeId);
  }
  
  // FIELD-FIELDS
  
	public final static String ATTRIBUTEID = "DatasetAnnotation_AttributeId";
	public final static String CONTENT = "DatasetAnnotation_Content";
	public final static String VALID = "DatasetAnnotation_Valid";
	public final static String DATASET = "DatasetAnnotation_Dataset";
	public final static String MODULEEXECUTION = "DatasetAnnotation_ModuleExecution";
 	public final static Set FIELDS = new HashSet();
	static {
	   FIELDS.add(ATTRIBUTEID);
	   FIELDS.add(CONTENT);
	   FIELDS.add(VALID);
	   FIELDS.add(DATASET);
	   FIELDS.add(MODULEEXECUTION);
 	}


}
