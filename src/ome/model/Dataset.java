package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * Dataset generated by hbm2java
 */
public class
Dataset 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer datasetId;
     private Boolean locked;
     private String name;
     private String description;
     private Set analysisChainExecutions;
     private Set omeSessions;
     private Set moduleExecutions;
     private Set datasetAnnotations;
     private Experimenter experimenter;
     private Group group;
     private Set projects;
     private Set images;


    // Constructors

    /** default constructor */
    public Dataset() {
    }
    
    /** constructor with id */
    public Dataset(Integer datasetId) {
        this.datasetId = datasetId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getDatasetId() {
        return this.datasetId;
    }
    
    public void setDatasetId(Integer datasetId) {
        this.datasetId = datasetId;
    }

    /**
     * 
     */
    public Boolean getLocked() {
        return this.locked;
    }
    
    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    /**
     * 
     */
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 
     */
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * 
     */
    public Set getAnalysisChainExecutions() {
        return this.analysisChainExecutions;
    }
    
    public void setAnalysisChainExecutions(Set analysisChainExecutions) {
        this.analysisChainExecutions = analysisChainExecutions;
    }

    /**
     * 
     */
    public Set getOmeSessions() {
        return this.omeSessions;
    }
    
    public void setOmeSessions(Set omeSessions) {
        this.omeSessions = omeSessions;
    }

    /**
     * 
     */
    public Set getModuleExecutions() {
        return this.moduleExecutions;
    }
    
    public void setModuleExecutions(Set moduleExecutions) {
        this.moduleExecutions = moduleExecutions;
    }

    /**
     * 
     */
    public Set getDatasetAnnotations() {
        return this.datasetAnnotations;
    }
    
    public void setDatasetAnnotations(Set datasetAnnotations) {
        this.datasetAnnotations = datasetAnnotations;
    }

    /**
     * 
     */
    public Experimenter getExperimenter() {
        return this.experimenter;
    }
    
    public void setExperimenter(Experimenter experimenter) {
        this.experimenter = experimenter;
    }

    /**
     * 
     */
    public Group getGroup() {
        return this.group;
    }
    
    public void setGroup(Group group) {
        this.group = group;
    }

    /**
     * 
     */
    public Set getProjects() {
        return this.projects;
    }
    
    public void setProjects(Set projects) {
        this.projects = projects;
    }

    /**
     * 
     */
    public Set getImages() {
        return this.images;
    }
    
    public void setImages(Set images) {
        this.images = images;
    }






  public boolean acceptFilter(Filter filter){


	  // Visiting: DatasetId ------------------------------------------
	  Integer _DatasetId = null;
	  try {
	     _DatasetId = getDatasetId();
	  } catch (Exception e) {
		 setDatasetId(null);
	  }
// TODO catch class cast?
	  setDatasetId((Integer) filter.filter(DATASETID,_DatasetId)); 

	  // Visiting: Locked ------------------------------------------
	  Boolean _Locked = null;
	  try {
	     _Locked = getLocked();
	  } catch (Exception e) {
		 setLocked(null);
	  }
// TODO catch class cast?
	  setLocked((Boolean) filter.filter(LOCKED,_Locked)); 

	  // Visiting: Name ------------------------------------------
	  String _Name = null;
	  try {
	     _Name = getName();
	  } catch (Exception e) {
		 setName(null);
	  }
// TODO catch class cast?
	  setName((String) filter.filter(NAME,_Name)); 

	  // Visiting: Description ------------------------------------------
	  String _Description = null;
	  try {
	     _Description = getDescription();
	  } catch (Exception e) {
		 setDescription(null);
	  }
// TODO catch class cast?
	  setDescription((String) filter.filter(DESCRIPTION,_Description)); 

	  // Visiting: AnalysisChainExecutions ------------------------------------------
	  Set _AnalysisChainExecutions = null;
	  try {
	     _AnalysisChainExecutions = getAnalysisChainExecutions();
	  } catch (Exception e) {
		 setAnalysisChainExecutions(null);
	  }
// TODO catch class cast?
	  setAnalysisChainExecutions((Set) filter.filter(ANALYSISCHAINEXECUTIONS,_AnalysisChainExecutions)); 

	  // Visiting: OmeSessions ------------------------------------------
	  Set _OmeSessions = null;
	  try {
	     _OmeSessions = getOmeSessions();
	  } catch (Exception e) {
		 setOmeSessions(null);
	  }
// TODO catch class cast?
	  setOmeSessions((Set) filter.filter(OMESESSIONS,_OmeSessions)); 

	  // Visiting: ModuleExecutions ------------------------------------------
	  Set _ModuleExecutions = null;
	  try {
	     _ModuleExecutions = getModuleExecutions();
	  } catch (Exception e) {
		 setModuleExecutions(null);
	  }
// TODO catch class cast?
	  setModuleExecutions((Set) filter.filter(MODULEEXECUTIONS,_ModuleExecutions)); 

	  // Visiting: DatasetAnnotations ------------------------------------------
	  Set _DatasetAnnotations = null;
	  try {
	     _DatasetAnnotations = getDatasetAnnotations();
	  } catch (Exception e) {
		 setDatasetAnnotations(null);
	  }
// TODO catch class cast?
	  setDatasetAnnotations((Set) filter.filter(DATASETANNOTATIONS,_DatasetAnnotations)); 

	  // Visiting: Experimenter ------------------------------------------
	  Experimenter _Experimenter = null;
	  try {
	     _Experimenter = getExperimenter();
	  } catch (Exception e) {
		 setExperimenter(null);
	  }
// TODO catch class cast?
	  setExperimenter((Experimenter) filter.filter(EXPERIMENTER,_Experimenter)); 

	  // Visiting: Group ------------------------------------------
	  Group _Group = null;
	  try {
	     _Group = getGroup();
	  } catch (Exception e) {
		 setGroup(null);
	  }
// TODO catch class cast?
	  setGroup((Group) filter.filter(GROUP,_Group)); 

	  // Visiting: Projects ------------------------------------------
	  Set _Projects = null;
	  try {
	     _Projects = getProjects();
	  } catch (Exception e) {
		 setProjects(null);
	  }
// TODO catch class cast?
	  setProjects((Set) filter.filter(PROJECTS,_Projects)); 

	  // Visiting: Images ------------------------------------------
	  Set _Images = null;
	  try {
	     _Images = getImages();
	  } catch (Exception e) {
		 setImages(null);
	  }
// TODO catch class cast?
	  setImages((Set) filter.filter(IMAGES,_Images)); 
   	 return true;
  }
  
  public String toString(){
	return "Dataset"+(datasetId==null ? ":Hash_"+this.hashCode() : ":Id_"+datasetId);
  }
  
  // FIELD-FIELDS
  
	public final static String DATASETID = "Dataset_DatasetId";
	public final static String LOCKED = "Dataset_Locked";
	public final static String NAME = "Dataset_Name";
	public final static String DESCRIPTION = "Dataset_Description";
	public final static String ANALYSISCHAINEXECUTIONS = "Dataset_AnalysisChainExecutions";
	public final static String OMESESSIONS = "Dataset_OmeSessions";
	public final static String MODULEEXECUTIONS = "Dataset_ModuleExecutions";
	public final static String DATASETANNOTATIONS = "Dataset_DatasetAnnotations";
	public final static String EXPERIMENTER = "Dataset_Experimenter";
	public final static String GROUP = "Dataset_Group";
	public final static String PROJECTS = "Dataset_Projects";
	public final static String IMAGES = "Dataset_Images";
 	public final static Set FIELDS = new HashSet();
	static {
	   FIELDS.add(DATASETID);
	   FIELDS.add(LOCKED);
	   FIELDS.add(NAME);
	   FIELDS.add(DESCRIPTION);
	   FIELDS.add(ANALYSISCHAINEXECUTIONS);
	   FIELDS.add(OMESESSIONS);
	   FIELDS.add(MODULEEXECUTIONS);
	   FIELDS.add(DATASETANNOTATIONS);
	   FIELDS.add(EXPERIMENTER);
	   FIELDS.add(GROUP);
	   FIELDS.add(PROJECTS);
	   FIELDS.add(IMAGES);
 	}


}
