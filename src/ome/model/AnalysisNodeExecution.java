package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * AnalysisNodeExecution generated by hbm2java
 */
public class
AnalysisNodeExecution 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer analysisNodeExecutionId;
     private AnalysisChainExecution analysisChainExecution;
     private AnalysisChainNode analysisChainNode;
     private ModuleExecution moduleExecution;


    // Constructors

    /** default constructor */
    public AnalysisNodeExecution() {
    }
    
    /** constructor with id */
    public AnalysisNodeExecution(Integer analysisNodeExecutionId) {
        this.analysisNodeExecutionId = analysisNodeExecutionId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getAnalysisNodeExecutionId() {
        return this.analysisNodeExecutionId;
    }
    
    public void setAnalysisNodeExecutionId(Integer analysisNodeExecutionId) {
        this.analysisNodeExecutionId = analysisNodeExecutionId;
    }

    /**
     * 
     */
    public AnalysisChainExecution getAnalysisChainExecution() {
        return this.analysisChainExecution;
    }
    
    public void setAnalysisChainExecution(AnalysisChainExecution analysisChainExecution) {
        this.analysisChainExecution = analysisChainExecution;
    }

    /**
     * 
     */
    public AnalysisChainNode getAnalysisChainNode() {
        return this.analysisChainNode;
    }
    
    public void setAnalysisChainNode(AnalysisChainNode analysisChainNode) {
        this.analysisChainNode = analysisChainNode;
    }

    /**
     * 
     */
    public ModuleExecution getModuleExecution() {
        return this.moduleExecution;
    }
    
    public void setModuleExecution(ModuleExecution moduleExecution) {
        this.moduleExecution = moduleExecution;
    }






  public boolean acceptFilter(Filter filter){


	  // Visiting: AnalysisNodeExecutionId ------------------------------------------
	  Integer _AnalysisNodeExecutionId = null;
	  try {
	     _AnalysisNodeExecutionId = getAnalysisNodeExecutionId();
	  } catch (Exception e) {
		 setAnalysisNodeExecutionId(null);
	  }
// TODO catch class cast?
	  setAnalysisNodeExecutionId((Integer) filter.filter(ANALYSISNODEEXECUTIONID,_AnalysisNodeExecutionId)); 

	  // Visiting: AnalysisChainExecution ------------------------------------------
	  AnalysisChainExecution _AnalysisChainExecution = null;
	  try {
	     _AnalysisChainExecution = getAnalysisChainExecution();
	  } catch (Exception e) {
		 setAnalysisChainExecution(null);
	  }
// TODO catch class cast?
	  setAnalysisChainExecution((AnalysisChainExecution) filter.filter(ANALYSISCHAINEXECUTION,_AnalysisChainExecution)); 

	  // Visiting: AnalysisChainNode ------------------------------------------
	  AnalysisChainNode _AnalysisChainNode = null;
	  try {
	     _AnalysisChainNode = getAnalysisChainNode();
	  } catch (Exception e) {
		 setAnalysisChainNode(null);
	  }
// TODO catch class cast?
	  setAnalysisChainNode((AnalysisChainNode) filter.filter(ANALYSISCHAINNODE,_AnalysisChainNode)); 

	  // Visiting: ModuleExecution ------------------------------------------
	  ModuleExecution _ModuleExecution = null;
	  try {
	     _ModuleExecution = getModuleExecution();
	  } catch (Exception e) {
		 setModuleExecution(null);
	  }
// TODO catch class cast?
	  setModuleExecution((ModuleExecution) filter.filter(MODULEEXECUTION,_ModuleExecution)); 
   	 return true;
  }
  
  public String toString(){
	return "AnalysisNodeExecution"+(analysisNodeExecutionId==null ? ":Hash_"+this.hashCode() : ":Id_"+analysisNodeExecutionId);
  }
  
  // FIELD-FIELDS
  
	public final static String ANALYSISNODEEXECUTIONID = "AnalysisNodeExecution_AnalysisNodeExecutionId";
	public final static String ANALYSISCHAINEXECUTION = "AnalysisNodeExecution_AnalysisChainExecution";
	public final static String ANALYSISCHAINNODE = "AnalysisNodeExecution_AnalysisChainNode";
	public final static String MODULEEXECUTION = "AnalysisNodeExecution_ModuleExecution";
 	public final static Set FIELDS = new HashSet();
	static {
	   FIELDS.add(ANALYSISNODEEXECUTIONID);
	   FIELDS.add(ANALYSISCHAINEXECUTION);
	   FIELDS.add(ANALYSISCHAINNODE);
	   FIELDS.add(MODULEEXECUTION);
 	}


}
