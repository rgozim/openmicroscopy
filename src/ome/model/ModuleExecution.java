package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * ModuleExecution generated by hbm2java
 */
public class
ModuleExecution 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer moduleExecutionId;
     private String status;
     private Double attributeDbTime;
     private String iteratorTag;
     private String dependence;
     private Double attributeSortTime;
     private Date timestamp;
     private Boolean virtualMex;
     private String inputTag;
     private String errorMessage;
     private Double attributeCreateTime;
     private String newFeatureTag;
     private Double totalTime;
     private Module module;
     private Dataset dataset;
     private Experimenter experimenter;
     private Image image;
     private Group group;
     private Set thumbnails;
     private Set semanticTypeOutputs;
     private Set classifications;
     private Set repositories;
     private Set categories;
     private Set imageInfos;
     private Set renderingSettings;
     private Set logicalChannels;
     private Set imagePixels;
     private Set groups;
     private Set analysisNodeExecutions;
     private Set experimenters;
     private Set categoryGroups;
     private Set imageAnnotations;
     private Set datasetAnnotations;
     private Set imageDimensions;
     private Set channelComponents;


    // Constructors

    /** default constructor */
    public ModuleExecution() {
    }
    
    /** constructor with id */
    public ModuleExecution(Integer moduleExecutionId) {
        this.moduleExecutionId = moduleExecutionId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getModuleExecutionId() {
        return this.moduleExecutionId;
    }
    
    public void setModuleExecutionId(Integer moduleExecutionId) {
        this.moduleExecutionId = moduleExecutionId;
    }

    /**
     * 
     */
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * 
     */
    public Double getAttributeDbTime() {
        return this.attributeDbTime;
    }
    
    public void setAttributeDbTime(Double attributeDbTime) {
        this.attributeDbTime = attributeDbTime;
    }

    /**
     * 
     */
    public String getIteratorTag() {
        return this.iteratorTag;
    }
    
    public void setIteratorTag(String iteratorTag) {
        this.iteratorTag = iteratorTag;
    }

    /**
     * 
     */
    public String getDependence() {
        return this.dependence;
    }
    
    public void setDependence(String dependence) {
        this.dependence = dependence;
    }

    /**
     * 
     */
    public Double getAttributeSortTime() {
        return this.attributeSortTime;
    }
    
    public void setAttributeSortTime(Double attributeSortTime) {
        this.attributeSortTime = attributeSortTime;
    }

    /**
     * 
     */
    public Date getTimestamp() {
        return this.timestamp;
    }
    
    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * 
     */
    public Boolean getVirtualMex() {
        return this.virtualMex;
    }
    
    public void setVirtualMex(Boolean virtualMex) {
        this.virtualMex = virtualMex;
    }

    /**
     * 
     */
    public String getInputTag() {
        return this.inputTag;
    }
    
    public void setInputTag(String inputTag) {
        this.inputTag = inputTag;
    }

    /**
     * 
     */
    public String getErrorMessage() {
        return this.errorMessage;
    }
    
    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    /**
     * 
     */
    public Double getAttributeCreateTime() {
        return this.attributeCreateTime;
    }
    
    public void setAttributeCreateTime(Double attributeCreateTime) {
        this.attributeCreateTime = attributeCreateTime;
    }

    /**
     * 
     */
    public String getNewFeatureTag() {
        return this.newFeatureTag;
    }
    
    public void setNewFeatureTag(String newFeatureTag) {
        this.newFeatureTag = newFeatureTag;
    }

    /**
     * 
     */
    public Double getTotalTime() {
        return this.totalTime;
    }
    
    public void setTotalTime(Double totalTime) {
        this.totalTime = totalTime;
    }

    /**
     * 
     */
    public Module getModule() {
        return this.module;
    }
    
    public void setModule(Module module) {
        this.module = module;
    }

    /**
     * 
     */
    public Dataset getDataset() {
        return this.dataset;
    }
    
    public void setDataset(Dataset dataset) {
        this.dataset = dataset;
    }

    /**
     * 
     */
    public Experimenter getExperimenter() {
        return this.experimenter;
    }
    
    public void setExperimenter(Experimenter experimenter) {
        this.experimenter = experimenter;
    }

    /**
     * 
     */
    public Image getImage() {
        return this.image;
    }
    
    public void setImage(Image image) {
        this.image = image;
    }

    /**
     * 
     */
    public Group getGroup() {
        return this.group;
    }
    
    public void setGroup(Group group) {
        this.group = group;
    }

    /**
     * 
     */
    public Set getThumbnails() {
        return this.thumbnails;
    }
    
    public void setThumbnails(Set thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * 
     */
    public Set getSemanticTypeOutputs() {
        return this.semanticTypeOutputs;
    }
    
    public void setSemanticTypeOutputs(Set semanticTypeOutputs) {
        this.semanticTypeOutputs = semanticTypeOutputs;
    }

    /**
     * 
     */
    public Set getClassifications() {
        return this.classifications;
    }
    
    public void setClassifications(Set classifications) {
        this.classifications = classifications;
    }

    /**
     * 
     */
    public Set getRepositories() {
        return this.repositories;
    }
    
    public void setRepositories(Set repositories) {
        this.repositories = repositories;
    }

    /**
     * 
     */
    public Set getCategories() {
        return this.categories;
    }
    
    public void setCategories(Set categories) {
        this.categories = categories;
    }

    /**
     * 
     */
    public Set getImageInfos() {
        return this.imageInfos;
    }
    
    public void setImageInfos(Set imageInfos) {
        this.imageInfos = imageInfos;
    }

    /**
     * 
     */
    public Set getRenderingSettings() {
        return this.renderingSettings;
    }
    
    public void setRenderingSettings(Set renderingSettings) {
        this.renderingSettings = renderingSettings;
    }

    /**
     * 
     */
    public Set getLogicalChannels() {
        return this.logicalChannels;
    }
    
    public void setLogicalChannels(Set logicalChannels) {
        this.logicalChannels = logicalChannels;
    }

    /**
     * 
     */
    public Set getImagePixels() {
        return this.imagePixels;
    }
    
    public void setImagePixels(Set imagePixels) {
        this.imagePixels = imagePixels;
    }

    /**
     * 
     */
    public Set getGroups() {
        return this.groups;
    }
    
    public void setGroups(Set groups) {
        this.groups = groups;
    }

    /**
     * 
     */
    public Set getAnalysisNodeExecutions() {
        return this.analysisNodeExecutions;
    }
    
    public void setAnalysisNodeExecutions(Set analysisNodeExecutions) {
        this.analysisNodeExecutions = analysisNodeExecutions;
    }

    /**
     * 
     */
    public Set getExperimenters() {
        return this.experimenters;
    }
    
    public void setExperimenters(Set experimenters) {
        this.experimenters = experimenters;
    }

    /**
     * 
     */
    public Set getCategoryGroups() {
        return this.categoryGroups;
    }
    
    public void setCategoryGroups(Set categoryGroups) {
        this.categoryGroups = categoryGroups;
    }

    /**
     * 
     */
    public Set getImageAnnotations() {
        return this.imageAnnotations;
    }
    
    public void setImageAnnotations(Set imageAnnotations) {
        this.imageAnnotations = imageAnnotations;
    }

    /**
     * 
     */
    public Set getDatasetAnnotations() {
        return this.datasetAnnotations;
    }
    
    public void setDatasetAnnotations(Set datasetAnnotations) {
        this.datasetAnnotations = datasetAnnotations;
    }

    /**
     * 
     */
    public Set getImageDimensions() {
        return this.imageDimensions;
    }
    
    public void setImageDimensions(Set imageDimensions) {
        this.imageDimensions = imageDimensions;
    }

    /**
     * 
     */
    public Set getChannelComponents() {
        return this.channelComponents;
    }
    
    public void setChannelComponents(Set channelComponents) {
        this.channelComponents = channelComponents;
    }






  public boolean acceptFilter(Filter filter){


	  // Visiting: ModuleExecutionId ------------------------------------------
	  Integer _ModuleExecutionId = null;
	  try {
	     _ModuleExecutionId = getModuleExecutionId();
	  } catch (Exception e) {
		 setModuleExecutionId(null);
	  }
// TODO catch class cast?
	  setModuleExecutionId((Integer) filter.filter(MODULEEXECUTIONID,_ModuleExecutionId)); 

	  // Visiting: Status ------------------------------------------
	  String _Status = null;
	  try {
	     _Status = getStatus();
	  } catch (Exception e) {
		 setStatus(null);
	  }
// TODO catch class cast?
	  setStatus((String) filter.filter(STATUS,_Status)); 

	  // Visiting: AttributeDbTime ------------------------------------------
	  Double _AttributeDbTime = null;
	  try {
	     _AttributeDbTime = getAttributeDbTime();
	  } catch (Exception e) {
		 setAttributeDbTime(null);
	  }
// TODO catch class cast?
	  setAttributeDbTime((Double) filter.filter(ATTRIBUTEDBTIME,_AttributeDbTime)); 

	  // Visiting: IteratorTag ------------------------------------------
	  String _IteratorTag = null;
	  try {
	     _IteratorTag = getIteratorTag();
	  } catch (Exception e) {
		 setIteratorTag(null);
	  }
// TODO catch class cast?
	  setIteratorTag((String) filter.filter(ITERATORTAG,_IteratorTag)); 

	  // Visiting: Dependence ------------------------------------------
	  String _Dependence = null;
	  try {
	     _Dependence = getDependence();
	  } catch (Exception e) {
		 setDependence(null);
	  }
// TODO catch class cast?
	  setDependence((String) filter.filter(DEPENDENCE,_Dependence)); 

	  // Visiting: AttributeSortTime ------------------------------------------
	  Double _AttributeSortTime = null;
	  try {
	     _AttributeSortTime = getAttributeSortTime();
	  } catch (Exception e) {
		 setAttributeSortTime(null);
	  }
// TODO catch class cast?
	  setAttributeSortTime((Double) filter.filter(ATTRIBUTESORTTIME,_AttributeSortTime)); 

	  // Visiting: Timestamp ------------------------------------------
	  Date _Timestamp = null;
	  try {
	     _Timestamp = getTimestamp();
	  } catch (Exception e) {
		 setTimestamp(null);
	  }
// TODO catch class cast?
	  setTimestamp((Date) filter.filter(TIMESTAMP,_Timestamp)); 

	  // Visiting: VirtualMex ------------------------------------------
	  Boolean _VirtualMex = null;
	  try {
	     _VirtualMex = getVirtualMex();
	  } catch (Exception e) {
		 setVirtualMex(null);
	  }
// TODO catch class cast?
	  setVirtualMex((Boolean) filter.filter(VIRTUALMEX,_VirtualMex)); 

	  // Visiting: InputTag ------------------------------------------
	  String _InputTag = null;
	  try {
	     _InputTag = getInputTag();
	  } catch (Exception e) {
		 setInputTag(null);
	  }
// TODO catch class cast?
	  setInputTag((String) filter.filter(INPUTTAG,_InputTag)); 

	  // Visiting: ErrorMessage ------------------------------------------
	  String _ErrorMessage = null;
	  try {
	     _ErrorMessage = getErrorMessage();
	  } catch (Exception e) {
		 setErrorMessage(null);
	  }
// TODO catch class cast?
	  setErrorMessage((String) filter.filter(ERRORMESSAGE,_ErrorMessage)); 

	  // Visiting: AttributeCreateTime ------------------------------------------
	  Double _AttributeCreateTime = null;
	  try {
	     _AttributeCreateTime = getAttributeCreateTime();
	  } catch (Exception e) {
		 setAttributeCreateTime(null);
	  }
// TODO catch class cast?
	  setAttributeCreateTime((Double) filter.filter(ATTRIBUTECREATETIME,_AttributeCreateTime)); 

	  // Visiting: NewFeatureTag ------------------------------------------
	  String _NewFeatureTag = null;
	  try {
	     _NewFeatureTag = getNewFeatureTag();
	  } catch (Exception e) {
		 setNewFeatureTag(null);
	  }
// TODO catch class cast?
	  setNewFeatureTag((String) filter.filter(NEWFEATURETAG,_NewFeatureTag)); 

	  // Visiting: TotalTime ------------------------------------------
	  Double _TotalTime = null;
	  try {
	     _TotalTime = getTotalTime();
	  } catch (Exception e) {
		 setTotalTime(null);
	  }
// TODO catch class cast?
	  setTotalTime((Double) filter.filter(TOTALTIME,_TotalTime)); 

	  // Visiting: Module ------------------------------------------
	  Module _Module = null;
	  try {
	     _Module = getModule();
	  } catch (Exception e) {
		 setModule(null);
	  }
// TODO catch class cast?
	  setModule((Module) filter.filter(MODULE,_Module)); 

	  // Visiting: Dataset ------------------------------------------
	  Dataset _Dataset = null;
	  try {
	     _Dataset = getDataset();
	  } catch (Exception e) {
		 setDataset(null);
	  }
// TODO catch class cast?
	  setDataset((Dataset) filter.filter(DATASET,_Dataset)); 

	  // Visiting: Experimenter ------------------------------------------
	  Experimenter _Experimenter = null;
	  try {
	     _Experimenter = getExperimenter();
	  } catch (Exception e) {
		 setExperimenter(null);
	  }
// TODO catch class cast?
	  setExperimenter((Experimenter) filter.filter(EXPERIMENTER,_Experimenter)); 

	  // Visiting: Image ------------------------------------------
	  Image _Image = null;
	  try {
	     _Image = getImage();
	  } catch (Exception e) {
		 setImage(null);
	  }
// TODO catch class cast?
	  setImage((Image) filter.filter(IMAGE,_Image)); 

	  // Visiting: Group ------------------------------------------
	  Group _Group = null;
	  try {
	     _Group = getGroup();
	  } catch (Exception e) {
		 setGroup(null);
	  }
// TODO catch class cast?
	  setGroup((Group) filter.filter(GROUP,_Group)); 

	  // Visiting: Thumbnails ------------------------------------------
	  Set _Thumbnails = null;
	  try {
	     _Thumbnails = getThumbnails();
	  } catch (Exception e) {
		 setThumbnails(null);
	  }
// TODO catch class cast?
	  setThumbnails((Set) filter.filter(THUMBNAILS,_Thumbnails)); 

	  // Visiting: SemanticTypeOutputs ------------------------------------------
	  Set _SemanticTypeOutputs = null;
	  try {
	     _SemanticTypeOutputs = getSemanticTypeOutputs();
	  } catch (Exception e) {
		 setSemanticTypeOutputs(null);
	  }
// TODO catch class cast?
	  setSemanticTypeOutputs((Set) filter.filter(SEMANTICTYPEOUTPUTS,_SemanticTypeOutputs)); 

	  // Visiting: Classifications ------------------------------------------
	  Set _Classifications = null;
	  try {
	     _Classifications = getClassifications();
	  } catch (Exception e) {
		 setClassifications(null);
	  }
// TODO catch class cast?
	  setClassifications((Set) filter.filter(CLASSIFICATIONS,_Classifications)); 

	  // Visiting: Repositories ------------------------------------------
	  Set _Repositories = null;
	  try {
	     _Repositories = getRepositories();
	  } catch (Exception e) {
		 setRepositories(null);
	  }
// TODO catch class cast?
	  setRepositories((Set) filter.filter(REPOSITORIES,_Repositories)); 

	  // Visiting: Categories ------------------------------------------
	  Set _Categories = null;
	  try {
	     _Categories = getCategories();
	  } catch (Exception e) {
		 setCategories(null);
	  }
// TODO catch class cast?
	  setCategories((Set) filter.filter(CATEGORIES,_Categories)); 

	  // Visiting: ImageInfos ------------------------------------------
	  Set _ImageInfos = null;
	  try {
	     _ImageInfos = getImageInfos();
	  } catch (Exception e) {
		 setImageInfos(null);
	  }
// TODO catch class cast?
	  setImageInfos((Set) filter.filter(IMAGEINFOS,_ImageInfos)); 

	  // Visiting: RenderingSettings ------------------------------------------
	  Set _RenderingSettings = null;
	  try {
	     _RenderingSettings = getRenderingSettings();
	  } catch (Exception e) {
		 setRenderingSettings(null);
	  }
// TODO catch class cast?
	  setRenderingSettings((Set) filter.filter(RENDERINGSETTINGS,_RenderingSettings)); 

	  // Visiting: LogicalChannels ------------------------------------------
	  Set _LogicalChannels = null;
	  try {
	     _LogicalChannels = getLogicalChannels();
	  } catch (Exception e) {
		 setLogicalChannels(null);
	  }
// TODO catch class cast?
	  setLogicalChannels((Set) filter.filter(LOGICALCHANNELS,_LogicalChannels)); 

	  // Visiting: ImagePixels ------------------------------------------
	  Set _ImagePixels = null;
	  try {
	     _ImagePixels = getImagePixels();
	  } catch (Exception e) {
		 setImagePixels(null);
	  }
// TODO catch class cast?
	  setImagePixels((Set) filter.filter(IMAGEPIXELS,_ImagePixels)); 

	  // Visiting: Groups ------------------------------------------
	  Set _Groups = null;
	  try {
	     _Groups = getGroups();
	  } catch (Exception e) {
		 setGroups(null);
	  }
// TODO catch class cast?
	  setGroups((Set) filter.filter(GROUPS,_Groups)); 

	  // Visiting: AnalysisNodeExecutions ------------------------------------------
	  Set _AnalysisNodeExecutions = null;
	  try {
	     _AnalysisNodeExecutions = getAnalysisNodeExecutions();
	  } catch (Exception e) {
		 setAnalysisNodeExecutions(null);
	  }
// TODO catch class cast?
	  setAnalysisNodeExecutions((Set) filter.filter(ANALYSISNODEEXECUTIONS,_AnalysisNodeExecutions)); 

	  // Visiting: Experimenters ------------------------------------------
	  Set _Experimenters = null;
	  try {
	     _Experimenters = getExperimenters();
	  } catch (Exception e) {
		 setExperimenters(null);
	  }
// TODO catch class cast?
	  setExperimenters((Set) filter.filter(EXPERIMENTERS,_Experimenters)); 

	  // Visiting: CategoryGroups ------------------------------------------
	  Set _CategoryGroups = null;
	  try {
	     _CategoryGroups = getCategoryGroups();
	  } catch (Exception e) {
		 setCategoryGroups(null);
	  }
// TODO catch class cast?
	  setCategoryGroups((Set) filter.filter(CATEGORYGROUPS,_CategoryGroups)); 

	  // Visiting: ImageAnnotations ------------------------------------------
	  Set _ImageAnnotations = null;
	  try {
	     _ImageAnnotations = getImageAnnotations();
	  } catch (Exception e) {
		 setImageAnnotations(null);
	  }
// TODO catch class cast?
	  setImageAnnotations((Set) filter.filter(IMAGEANNOTATIONS,_ImageAnnotations)); 

	  // Visiting: DatasetAnnotations ------------------------------------------
	  Set _DatasetAnnotations = null;
	  try {
	     _DatasetAnnotations = getDatasetAnnotations();
	  } catch (Exception e) {
		 setDatasetAnnotations(null);
	  }
// TODO catch class cast?
	  setDatasetAnnotations((Set) filter.filter(DATASETANNOTATIONS,_DatasetAnnotations)); 

	  // Visiting: ImageDimensions ------------------------------------------
	  Set _ImageDimensions = null;
	  try {
	     _ImageDimensions = getImageDimensions();
	  } catch (Exception e) {
		 setImageDimensions(null);
	  }
// TODO catch class cast?
	  setImageDimensions((Set) filter.filter(IMAGEDIMENSIONS,_ImageDimensions)); 

	  // Visiting: ChannelComponents ------------------------------------------
	  Set _ChannelComponents = null;
	  try {
	     _ChannelComponents = getChannelComponents();
	  } catch (Exception e) {
		 setChannelComponents(null);
	  }
// TODO catch class cast?
	  setChannelComponents((Set) filter.filter(CHANNELCOMPONENTS,_ChannelComponents)); 
   	 return true;
  }
  
  public String toString(){
	return "ModuleExecution"+(moduleExecutionId==null ? ":Hash_"+this.hashCode() : ":Id_"+moduleExecutionId);
  }
  
  // FIELD-FIELDS
  
	public final static String MODULEEXECUTIONID = "ModuleExecution_ModuleExecutionId";
	public final static String STATUS = "ModuleExecution_Status";
	public final static String ATTRIBUTEDBTIME = "ModuleExecution_AttributeDbTime";
	public final static String ITERATORTAG = "ModuleExecution_IteratorTag";
	public final static String DEPENDENCE = "ModuleExecution_Dependence";
	public final static String ATTRIBUTESORTTIME = "ModuleExecution_AttributeSortTime";
	public final static String TIMESTAMP = "ModuleExecution_Timestamp";
	public final static String VIRTUALMEX = "ModuleExecution_VirtualMex";
	public final static String INPUTTAG = "ModuleExecution_InputTag";
	public final static String ERRORMESSAGE = "ModuleExecution_ErrorMessage";
	public final static String ATTRIBUTECREATETIME = "ModuleExecution_AttributeCreateTime";
	public final static String NEWFEATURETAG = "ModuleExecution_NewFeatureTag";
	public final static String TOTALTIME = "ModuleExecution_TotalTime";
	public final static String MODULE = "ModuleExecution_Module";
	public final static String DATASET = "ModuleExecution_Dataset";
	public final static String EXPERIMENTER = "ModuleExecution_Experimenter";
	public final static String IMAGE = "ModuleExecution_Image";
	public final static String GROUP = "ModuleExecution_Group";
	public final static String THUMBNAILS = "ModuleExecution_Thumbnails";
	public final static String SEMANTICTYPEOUTPUTS = "ModuleExecution_SemanticTypeOutputs";
	public final static String CLASSIFICATIONS = "ModuleExecution_Classifications";
	public final static String REPOSITORIES = "ModuleExecution_Repositories";
	public final static String CATEGORIES = "ModuleExecution_Categories";
	public final static String IMAGEINFOS = "ModuleExecution_ImageInfos";
	public final static String RENDERINGSETTINGS = "ModuleExecution_RenderingSettings";
	public final static String LOGICALCHANNELS = "ModuleExecution_LogicalChannels";
	public final static String IMAGEPIXELS = "ModuleExecution_ImagePixels";
	public final static String GROUPS = "ModuleExecution_Groups";
	public final static String ANALYSISNODEEXECUTIONS = "ModuleExecution_AnalysisNodeExecutions";
	public final static String EXPERIMENTERS = "ModuleExecution_Experimenters";
	public final static String CATEGORYGROUPS = "ModuleExecution_CategoryGroups";
	public final static String IMAGEANNOTATIONS = "ModuleExecution_ImageAnnotations";
	public final static String DATASETANNOTATIONS = "ModuleExecution_DatasetAnnotations";
	public final static String IMAGEDIMENSIONS = "ModuleExecution_ImageDimensions";
	public final static String CHANNELCOMPONENTS = "ModuleExecution_ChannelComponents";
 	public final static Set FIELDS = new HashSet();
	static {
	   FIELDS.add(MODULEEXECUTIONID);
	   FIELDS.add(STATUS);
	   FIELDS.add(ATTRIBUTEDBTIME);
	   FIELDS.add(ITERATORTAG);
	   FIELDS.add(DEPENDENCE);
	   FIELDS.add(ATTRIBUTESORTTIME);
	   FIELDS.add(TIMESTAMP);
	   FIELDS.add(VIRTUALMEX);
	   FIELDS.add(INPUTTAG);
	   FIELDS.add(ERRORMESSAGE);
	   FIELDS.add(ATTRIBUTECREATETIME);
	   FIELDS.add(NEWFEATURETAG);
	   FIELDS.add(TOTALTIME);
	   FIELDS.add(MODULE);
	   FIELDS.add(DATASET);
	   FIELDS.add(EXPERIMENTER);
	   FIELDS.add(IMAGE);
	   FIELDS.add(GROUP);
	   FIELDS.add(THUMBNAILS);
	   FIELDS.add(SEMANTICTYPEOUTPUTS);
	   FIELDS.add(CLASSIFICATIONS);
	   FIELDS.add(REPOSITORIES);
	   FIELDS.add(CATEGORIES);
	   FIELDS.add(IMAGEINFOS);
	   FIELDS.add(RENDERINGSETTINGS);
	   FIELDS.add(LOGICALCHANNELS);
	   FIELDS.add(IMAGEPIXELS);
	   FIELDS.add(GROUPS);
	   FIELDS.add(ANALYSISNODEEXECUTIONS);
	   FIELDS.add(EXPERIMENTERS);
	   FIELDS.add(CATEGORYGROUPS);
	   FIELDS.add(IMAGEANNOTATIONS);
	   FIELDS.add(DATASETANNOTATIONS);
	   FIELDS.add(IMAGEDIMENSIONS);
	   FIELDS.add(CHANNELCOMPONENTS);
 	}


}
