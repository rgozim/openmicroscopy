package ome.model;

import ome.util.BaseModelUtils;
import ome.util.Filterable;
import ome.util.Filter;


import java.util.*;




/**
 * SemanticType generated by hbm2java
 */
public class
SemanticType 
implements java.io.Serializable ,
ome.api.OMEModel,
ome.util.Filterable {

    // Fields    

     private Integer semanticTypeId;
     private String granularity;
     private String name;
     private String description;
     private Set semanticTypeOutputs;
     private Set formalOutputs;
     private Set formalInputs;
     private Set semanticElements;


    // Constructors

    /** default constructor */
    public SemanticType() {
    }
    
    /** constructor with id */
    public SemanticType(Integer semanticTypeId) {
        this.semanticTypeId = semanticTypeId;
    }
   
    
    

    // Property accessors

    /**
     * 
     */
    public Integer getSemanticTypeId() {
        return this.semanticTypeId;
    }
    
    public void setSemanticTypeId(Integer semanticTypeId) {
        this.semanticTypeId = semanticTypeId;
    }

    /**
     * 
     */
    public String getGranularity() {
        return this.granularity;
    }
    
    public void setGranularity(String granularity) {
        this.granularity = granularity;
    }

    /**
     * 
     */
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 
     */
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * 
     */
    public Set getSemanticTypeOutputs() {
        return this.semanticTypeOutputs;
    }
    
    public void setSemanticTypeOutputs(Set semanticTypeOutputs) {
        this.semanticTypeOutputs = semanticTypeOutputs;
    }

    /**
     * 
     */
    public Set getFormalOutputs() {
        return this.formalOutputs;
    }
    
    public void setFormalOutputs(Set formalOutputs) {
        this.formalOutputs = formalOutputs;
    }

    /**
     * 
     */
    public Set getFormalInputs() {
        return this.formalInputs;
    }
    
    public void setFormalInputs(Set formalInputs) {
        this.formalInputs = formalInputs;
    }

    /**
     * 
     */
    public Set getSemanticElements() {
        return this.semanticElements;
    }
    
    public void setSemanticElements(Set semanticElements) {
        this.semanticElements = semanticElements;
    }






  public boolean acceptFilter(Filter filter){


	  // Visiting: SemanticTypeId ------------------------------------------
	  Integer _SemanticTypeId = null;
	  try {
	     _SemanticTypeId = getSemanticTypeId();
	  } catch (Exception e) {
		 setSemanticTypeId(null);
	  }
// TODO catch class cast?
	  setSemanticTypeId((Integer) filter.filter(SEMANTICTYPEID,_SemanticTypeId)); 

	  // Visiting: Granularity ------------------------------------------
	  String _Granularity = null;
	  try {
	     _Granularity = getGranularity();
	  } catch (Exception e) {
		 setGranularity(null);
	  }
// TODO catch class cast?
	  setGranularity((String) filter.filter(GRANULARITY,_Granularity)); 

	  // Visiting: Name ------------------------------------------
	  String _Name = null;
	  try {
	     _Name = getName();
	  } catch (Exception e) {
		 setName(null);
	  }
// TODO catch class cast?
	  setName((String) filter.filter(NAME,_Name)); 

	  // Visiting: Description ------------------------------------------
	  String _Description = null;
	  try {
	     _Description = getDescription();
	  } catch (Exception e) {
		 setDescription(null);
	  }
// TODO catch class cast?
	  setDescription((String) filter.filter(DESCRIPTION,_Description)); 

	  // Visiting: SemanticTypeOutputs ------------------------------------------
	  Set _SemanticTypeOutputs = null;
	  try {
	     _SemanticTypeOutputs = getSemanticTypeOutputs();
	  } catch (Exception e) {
		 setSemanticTypeOutputs(null);
	  }
// TODO catch class cast?
	  setSemanticTypeOutputs((Set) filter.filter(SEMANTICTYPEOUTPUTS,_SemanticTypeOutputs)); 

	  // Visiting: FormalOutputs ------------------------------------------
	  Set _FormalOutputs = null;
	  try {
	     _FormalOutputs = getFormalOutputs();
	  } catch (Exception e) {
		 setFormalOutputs(null);
	  }
// TODO catch class cast?
	  setFormalOutputs((Set) filter.filter(FORMALOUTPUTS,_FormalOutputs)); 

	  // Visiting: FormalInputs ------------------------------------------
	  Set _FormalInputs = null;
	  try {
	     _FormalInputs = getFormalInputs();
	  } catch (Exception e) {
		 setFormalInputs(null);
	  }
// TODO catch class cast?
	  setFormalInputs((Set) filter.filter(FORMALINPUTS,_FormalInputs)); 

	  // Visiting: SemanticElements ------------------------------------------
	  Set _SemanticElements = null;
	  try {
	     _SemanticElements = getSemanticElements();
	  } catch (Exception e) {
		 setSemanticElements(null);
	  }
// TODO catch class cast?
	  setSemanticElements((Set) filter.filter(SEMANTICELEMENTS,_SemanticElements)); 
   	 return true;
  }
  
  public String toString(){
	return "SemanticType"+(semanticTypeId==null ? ":Hash_"+this.hashCode() : ":Id_"+semanticTypeId);
  }
  
  // FIELD-FIELDS
  
	public final static String SEMANTICTYPEID = "SemanticType_SemanticTypeId";
	public final static String GRANULARITY = "SemanticType_Granularity";
	public final static String NAME = "SemanticType_Name";
	public final static String DESCRIPTION = "SemanticType_Description";
	public final static String SEMANTICTYPEOUTPUTS = "SemanticType_SemanticTypeOutputs";
	public final static String FORMALOUTPUTS = "SemanticType_FormalOutputs";
	public final static String FORMALINPUTS = "SemanticType_FormalInputs";
	public final static String SEMANTICELEMENTS = "SemanticType_SemanticElements";
 	public final static Set FIELDS = new HashSet();
	static {
	   FIELDS.add(SEMANTICTYPEID);
	   FIELDS.add(GRANULARITY);
	   FIELDS.add(NAME);
	   FIELDS.add(DESCRIPTION);
	   FIELDS.add(SEMANTICTYPEOUTPUTS);
	   FIELDS.add(FORMALOUTPUTS);
	   FIELDS.add(FORMALINPUTS);
	   FIELDS.add(SEMANTICELEMENTS);
 	}


}
