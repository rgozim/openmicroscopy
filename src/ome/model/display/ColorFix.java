/*
 *   This file was generated by dsl/resources/ome/dsl/object.vm
 * 
 *   Copyright (c) 2007 Glencoe Software Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

package ome.model.display;

import ome.conditions.*;
import ome.model.*;


/**
 * Temporary replacement for the previous model object "Color" which has
 * been removed. This object is not active in Hibernate.
 */
public  class ColorFix
implements java.io.Serializable, IObject, IMutable{

   /* These values are defined in dsl/resources/ome/dsl/object.vm:
    * -------------------------------------------------------------
    * Explanation of serialVersionUID ex 0000000 03 00 00 01 03 01 L;
    * 1-7   : currently unused
    * 8-9   : major part (3.x.x)
    * 10-11 : minor part (x.0.x)
    * 12-13 : patch part (x.x.0)
    * 14-15 : release type   (B)
    * 16-17 : release number (3)
    * 18-19 : increment per delta // any changes to the dsl or mapping files
    */
    private static final long serialVersionUID = 0000000030000020302L;

   /*
    * Constants naming filters used by the OMERO
    * security system.
    */
    public final static String OWNER_FILTER = "colorfix_owner_filter";
    public final static String GROUP_FILTER = "colorfix_group_filter";
    public final static String EVENT_FILTER = "colorfix_event_filter";
    public final static String PERMS_FILTER = "colorfix_perms_filter";

    public ColorFix () {
        this(null, true);
    }

    protected ColorFix (Long id) {
        this(id, true);
    }

    /**
     * Main constructor.
     */
    public ColorFix (Long id, boolean loaded) {
        setId(id);
        if (loaded) {
            getDetails().setContext(this);
        } else {
            if (this.id == null) {
                throw new ApiUsageException("Id cannot be null for a proxy");
            }
            unload();
        }
    }


    public ColorFix(
java.lang.Integer _red,java.lang.Integer _green,java.lang.Integer _blue,java.lang.Integer _alpha    ) {
        this(null, true);
        setRed(_red);
        setGreen(_green);
        setBlue(_blue);
        setAlpha(_alpha);
    }

    public final static String ID = "ome.model.display.ColorFix_id";
    
    protected Long id;

   /**
    * The DB unique identifier for this object. You are not responsible for
    * setting the id; however, it can be useful for creating "unloaded"
    * versions of your objects.
    *
    * Each top-level entity contains an id field of type long.
    * For all objects returned from the server, this value will
    * be non-null, which doesn't necessarily hold for the other
    * fields.
    */
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }


   /*
    *    INTERFACE-BASED
    *    Several properties are defined by whether or not
    *    the OME definition has certain interfaces.
    */

    public final static String VERSION = "ome.model.display.ColorFix_version";

    protected Integer version = 0; // TODO?

   /**
    * This version number is controlled by the database for optimisitic
    * locking.
    */
//TODO mark off #118 if this succeeds, otherwise, completely remove versions and test updateEvent
    public Integer getVersion() {
        preGetter( VERSION );
        return this.version;
    }

    public void setVersion(Integer version) {
        preSetter( VERSION, version );
        this.version = version;
    }


   /*
    *    PROPERTIES
    *    All properties which follow are straight-forward
    *    and can be understood using only the Hibernate
    *    documentation.
    */

    protected java.lang.Integer red = null;

   /**
    * Simple field ome.model.display.ColorFix.red (java.lang.Integer) 
    */
    // Not indexed
    public java.lang.Integer getRed() {
        preGetter( RED );
        return this.red;
    }

    public void setRed(java.lang.Integer red) {
        preSetter( RED, red);
        this.red = (java.lang.Integer) red;
    }
    protected java.lang.Integer green = null;

   /**
    * Simple field ome.model.display.ColorFix.green (java.lang.Integer) 
    */
    // Not indexed
    public java.lang.Integer getGreen() {
        preGetter( GREEN );
        return this.green;
    }

    public void setGreen(java.lang.Integer green) {
        preSetter( GREEN, green);
        this.green = (java.lang.Integer) green;
    }
    protected java.lang.Integer blue = null;

   /**
    * Simple field ome.model.display.ColorFix.blue (java.lang.Integer) 
    */
    // Not indexed
    public java.lang.Integer getBlue() {
        preGetter( BLUE );
        return this.blue;
    }

    public void setBlue(java.lang.Integer blue) {
        preSetter( BLUE, blue);
        this.blue = (java.lang.Integer) blue;
    }
    protected java.lang.Integer alpha = null;

   /**
    * Simple field ome.model.display.ColorFix.alpha (java.lang.Integer) 
    */
    // Not indexed
    public java.lang.Integer getAlpha() {
        preGetter( ALPHA );
        return this.alpha;
    }

    public void setAlpha(java.lang.Integer alpha) {
        preSetter( ALPHA, alpha);
        this.alpha = (java.lang.Integer) alpha;
    }
    protected ome.model.internal.Details details = new Details();

 
   /**
    * The details of this object correspond to low-level system
    * information. Owner, permissions, Details is always guaranteed 
    * to be non-null, unless the user actively nulls it.
    *
    * Every entity also contains a Detail reference, which doesn't
    * refer to a separate table but rather to a collection of fields
    * collected into a Hibernate "component" which is embedded in the
    * object.
    *
    * HQL queries which refer to the Details component cannot directly
    * fetch the entity like this:
    *
    *    select o from Object join fetch o.details
    *
    * but rather each field of the Details instance must be explicitly
    * joined:
    *
    *    select o from Object join fetch o.details.owner
    *
    * It should also be noted that not all types have all the fields
    * which are present on Details. For example,
    *
    *    select e from Experimenter e join fetch e.details.owner
    *
    * will fail. Experimenter has no owner, for obvious reasons.
    *
    * Note: subclasses of this class will return a subclasse of 
    */
    public ome.model.internal.Details getDetails() {
        preGetter( DETAILS );
        return this.details;
    }

   /**
    */
    protected void setDetails(ome.model.internal.Details details) {
        preSetter( DETAILS, details );
        this.details = (Details) details;
    }


    // TODO what does this look like with Validator
    public boolean isValid() {
        return ome.util.Validator.validate(this).isValid();
    }
  
    public ome.util.Validation validate() {
        return ome.util.Validator.validate(this);
    }

    public ome.model.display.ColorFix newInstance() 
    {
        return new ome.model.display.ColorFix();
    }

    public ome.model.display.ColorFix proxy() {
        return new ome.model.display.ColorFix(this.id, false);
    }

    @SuppressWarnings("unchecked")
    public boolean acceptFilter(ome.util.Filter __filter){
        this.id = (Long) __filter.filter(ID, this.id);
        this.version = (Integer) __filter.filter(VERSION, this.version);
        this.red = (java.lang.Integer) __filter.filter(RED, this.red );
        this.green = (java.lang.Integer) __filter.filter(GREEN, this.green );
        this.blue = (java.lang.Integer) __filter.filter(BLUE, this.blue );
        this.alpha = (java.lang.Integer) __filter.filter(ALPHA, this.alpha );
        this.details = (ome.model.internal.Details) __filter.filter(DETAILS, this.details );
        return true;
    }

    @Override
    public String toString(){
        String name = this.getClass().getName();
        StringBuilder sb = new StringBuilder(name.length() + 24);
        sb.append(name);
        if (this.id == null) {
            sb.append(":Hash_");
            sb.append(this.hashCode());
        } else {
            sb.append(":Id_");
            sb.append(this.id);
        }
        return sb.toString();
    }
  
    // FIELD-FIELDS
  
    public java.util.Set<String> fields() {
        return ome.model.display.ColorFix.FIELDS;
    }
  
    public final static String RED = "ome.model.display.ColorFix_red";
    public final static String GREEN = "ome.model.display.ColorFix_green";
    public final static String BLUE = "ome.model.display.ColorFix_blue";
    public final static String ALPHA = "ome.model.display.ColorFix_alpha";
    public final static String DETAILS = "ome.model.display.ColorFix_details";

    public final static java.util.Set<String> FIELDS;
    static {
       java.util.Set<String> raw = new java.util.HashSet<String>();
       raw.add(ID);
       raw.add(VERSION);
       raw.add(RED);
       raw.add(GREEN);
       raw.add(BLUE);
       raw.add(ALPHA);
       raw.add(DETAILS);
       FIELDS = java.util.Collections.unmodifiableSet( raw );
    }
    
    
    // Dynamic Getter/Setter
    // TODO is this searched for proxies?
    protected java.util.Map<String, Object> _dynamicFields; 

    public Object retrieve(String field) {
        if (field == null) {
            return null;
        } else if (field.equals(ID)) {
             return getId();
        } else if (field.equals(VERSION)) {
             return getVersion();
        } else if (field.equals(RED)) { // TODO use == here first??
            return getRed();
        } else if (field.equals(GREEN)) { // TODO use == here first??
            return getGreen();
        } else if (field.equals(BLUE)) { // TODO use == here first??
            return getBlue();
        } else if (field.equals(ALPHA)) { // TODO use == here first??
            return getAlpha();
        } else if (field.equals(DETAILS)) { // TODO use == here first??
            return getDetails();
        } else {
            if (_dynamicFields != null) {
                return _dynamicFields.get(field);
            }
            return null;
        }
    }
    
    @SuppressWarnings("unchecked")
    public void putAt(String field, Object value)
    {
        if (field == null) {
            return;
        } else if (field.equals(ID)) {
             setId((Long) value);
        } else if (field.equals(VERSION)) {
             setVersion((Integer) value);
        } else if (field.equals(RED)) {
            setRed((java.lang.Integer)value);
        } else if (field.equals(GREEN)) {
            setGreen((java.lang.Integer)value);
        } else if (field.equals(BLUE)) {
            setBlue((java.lang.Integer)value);
        } else if (field.equals(ALPHA)) {
            setAlpha((java.lang.Integer)value);
        } else if (field.equals(DETAILS)) {
            setDetails((ome.model.internal.Details)value);
        } else {
            if (_dynamicFields == null) {
                _dynamicFields = new java.util.HashMap<String, Object>();
            }
            _dynamicFields.put(field,value);
        }
    }

    protected boolean _loaded = true;

    public boolean isLoaded() {
        return _loaded;
    }

    protected void errorIfUnloaded() {
        if ( ! _loaded ) {
            throw new IllegalStateException("Object unloaded:"+this);
        }
    }


    public void unload() {
        _loaded = false;
        this.version = null;
        this.red = null;
        this.green = null;
        this.blue = null;
        this.alpha = null;
        this.details = null;
    }

    private transient ome.model.internal.GraphHolder _graphHolder;

    public final ome.model.internal.GraphHolder getGraphHolder()
    {
        if (_graphHolder == null)
            _graphHolder = new ome.model.internal.GraphHolder();
        return _graphHolder;
    }


    protected void preGetter( String field ) {
        errorIfUnloaded();
    }

    protected void preSetter( String field, Object value ) {
        errorIfUnloaded();
    }

    protected void throwNullCollectionException(String propertyName) {
        throw new ApiUsageException(
            "Error updating collection:" + propertyName +"\n"+
            "Collection is currently null. This can be seen\n"+
            "by testing \"sizeOf"+ propertyName +" < 0\". This implies\n"+
            "that this collection was unloaded. Please refresh this object\n"+
            "in order to update this collection.\n"
            );
    }


    public static class Details extends ome.model.internal.Details {

        private final static long serialVersionUID = 0000000030000020301L;

        public ome.model.internal.Details newInstance() {
            return new Details();
        }
        
        public ome.model.internal.Permissions getPermissions() {
            return super.getPermissions();
        }

        public ome.model.meta.ExternalInfo getExternalInfo() {
            return super.getExternalInfo();
        }

        @Override
        public ome.model.meta.Experimenter getOwner() {
            return super.getOwner();
        }

        @Override
        public ome.model.meta.Event getCreationEvent() {
            return super.getCreationEvent();
        }

        @Override
        public ome.model.meta.ExperimenterGroup getGroup() {
            return super.getGroup();
        }

        @Override
        public ome.model.meta.Event getUpdateEvent() {
            return super.getUpdateEvent();
        }


    }
}
