<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" [

	<!-- COMPONENTS FOR BUILDING LATER ENTITIES :
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		This makes things a little more difficult to understand, 
		but prevents coding mistakes.
		
		TODO if all ids where called *.getId() then we could merge some of these 
		
	-->

	<!-- =========================================
		LOAD
	==============================================-->

	<!ENTITY fetchProject
	"
	  left outer join fetch p.experimenter as p_e
	  left outer join fetch p.group as p_g
	  left outer join fetch p.datasets as d
	" 
	>
		
	<!ENTITY fetchDataset  
	"
	  left outer join fetch d.experimenter as d_e
	  left outer join fetch d.group as d_g
	  left outer join fetch d.images as i
	  left outer join fetch i.group as i_g
	  left outer join fetch i.experimenter as i_e
  	  left outer join fetch i.imagePixel as i_pix
	" 
	>

	<!ENTITY fetchCategoryGroup  
	"
      left outer join fetch cg.moduleExecution as cg_mex 
	  left outer join fetch cg_mex.experimenter as cg_exp
	  left outer join fetch cg.categories as c
	" 
	>

	<!ENTITY fetchCategory
	" 
	  left outer join fetch c.moduleExecution as c_mex
	  left outer join fetch c_mex.experimenter as c_exp
	  left outer join fetch c.classifications as cla
	  left outer join fetch cla.moduleExecution as cla_mex
	  left outer join fetch cla_mex.experimenter as cla_exp
	"
	>
<!-- TODO possibly rejoin above and below -->
	<!ENTITY fetchClassificationImage
    "
	  left outer join fetch cla.image as i
	  left outer join fetch i.imagePixel as i_pix 
    "
    >
	
	<!ENTITY fetchDatasetAnnotationOwner
	" 
	  left outer join fetch d_ann.moduleExecution as d_ann_mex
	  left outer join fetch d_ann_mex.experimenter as d_ann_exp
	"
	>
	
	<!ENTITY fetchDatasetAnnotation
	" 
	  left outer join fetch d.datasetAnnotations as d_ann
	  &fetchDatasetAnnotationOwner;
	"
	>

	<!ENTITY fetchImageAnnotationOwner
	" 
	  left outer join fetch i_ann.moduleExecution as i_ann_mex
	  left outer join fetch i_ann_mex.experimenter as i_ann_exp
	"
	>

	<!ENTITY fetchImageAnnotation
	" 
	  left outer join fetch i.imageAnnotations as i_ann
	  &fetchImageAnnotationOwner;
	"
	>
	
	<!ENTITY fetchPDI
	" 
	  left outer join fetch i.imagePixel as i_pix
	  left outer join fetch i.datasets as d
	  left outer join fetch d.experimenter as d_exp
	  left outer join fetch d.group as d_g	  
	  left outer join fetch d.projects as p
	  left outer join fetch p.experimenter as p_exp
	  left outer join fetch p.group as p_g 
	"
	>

	<!ENTITY fetchCGCI
	" 
	  left outer join fetch i.imagePixel as i_pix	
	  left outer join fetch i.classifications as cla 
	  left outer join fetch cla.category as c
	  left outer join fetch c.moduleExecution as c_mex
	  left outer join fetch c_mex.experimenter as c_exp
	  left outer join fetch c.categoryGroup as cg
	  left outer join fetch cg.moduleExecution as cg_mex
	  left outer join fetch cg_mex.experimenter as cg_exp
	"
	>
		
	<!-- =========================================
		FILTER
	==============================================-->
	
	<!ENTITY NoImportSet
	"
      d.name != 'ImportSet'
	"
	>
	
	<!ENTITY ValidClassification 
	" 
      ( cla.valid = true or cla.valid is null)
	"
	>

	<!ENTITY ValidDatasetAnnotation 
	" 
      ( d_ann.valid = true or d_ann.valid is null ) 
	"
	>	

	<!ENTITY OwnsDatasetAnnotation 
	" 
      ( d_ann_exp = :expId or d_ann_exp is null )
	"
	>	
	
	<!ENTITY ValidImageAnnotation 
	" 
	  ( i_ann.valid = true or i_ann.valid is null )
	"
	>	

	<!ENTITY OwnsImageAnnotation 
	" 
	  ( i_ann_exp = :expId or i_ann_exp is null )
	"
	>	
		
	<!-- =========================================
		Full QUERIES:
		~~~~~~~~~~~~~
		TODO: Could possibly use pre_ post_ 
		entities to reduce duplication here.
	==============================================-->
	
  <!ENTITY loadHierarchy_by_Project
  " 
	select p
    from Project as p
	  &fetchProject;
  	  &fetchDataset;
	  where 
	    p.projectId = :id
	  	and &NoImportSet;
  "
  >

  <!ENTITY loadHierarchy_by_Project_Annotated
  "
    select p 
    from Project as p
	  &fetchProject;
  	  &fetchDataset;
	  &fetchDatasetAnnotation;
	  &fetchImageAnnotation;	  
	  where 
	    p.projectId = :id
	  	and &NoImportSet;
	    and &ValidDatasetAnnotation;
	    and &ValidImageAnnotation;	  
	    and &OwnsDatasetAnnotation;
	    and &OwnsImageAnnotation;	  
  "
  >

  <!ENTITY loadHierarchy_by_Dataset
  "
    select d
    from Dataset as d 
	  &fetchDataset;
	  where 
	    d.datasetId = :id 
   	    and &NoImportSet;"
  >

  <!ENTITY loadHierarchy_by_Dataset_Annotated
  "
    select d
    from Dataset as d 
	  &fetchDataset;
	  &fetchDatasetAnnotation;
	  &fetchImageAnnotation;	  
	  where 
	    d.datasetId = :id 
   	    and &NoImportSet;
  	    and &ValidDatasetAnnotation;
	    and &OwnsDatasetAnnotation;
  	    and &ValidImageAnnotation;
	    and &OwnsImageAnnotation;
  "
  >
	
  <!ENTITY loadHierarchy_by_CategoryGroup
  "
    select cg
    from CategoryGroup cg 
	  &fetchCategoryGroup;
	  &fetchCategory;
	  &fetchClassificationImage;
	  where &ValidClassification;
	      and cg.attributeId = :id
  "
  >

  <!ENTITY loadHierarchy_by_CategoryGroup_Annotated
  "
    select cg
    from CategoryGroup cg 
	  &fetchCategoryGroup;
	  &fetchCategory;
	  &fetchClassificationImage;
	  &fetchImageAnnotation;
	  where &ValidClassification;
	    and cg.attributeId = :id
	    and &ValidImageAnnotation;
	    and &OwnsImageAnnotation;
  "
  >

  <!ENTITY loadHierarchy_by_Category
  "  
    select c
    from Category c 
	  &fetchCategory;
	  &fetchClassificationImage;
	  where 
	    &ValidClassification;
  		and c.attributeId = :id 
  "
  >

  <!ENTITY loadHierarchy_by_Category_Annotated
  "  
    select c
    from Category c 
	  &fetchCategory;
	  &fetchClassificationImage;
	  &fetchImageAnnotation;	  
	  where 
	    &ValidClassification;
  		and c.attributeId = :id 
	    and &ValidImageAnnotation;
	    and &OwnsImageAnnotation;
  "
  >
	
  <!ENTITY findPDI
  "
    select i
    from Image as i 
	  &fetchPDI;
      where 
	    i in (:img_list)
	  	and &NoImportSet;
  "
  >	

  <!ENTITY findPDI_Annotated
  "
    select i
    from Image as i 
	  &fetchPDI;
	  &fetchDatasetAnnotation;
	  &fetchImageAnnotation;
      where 
	    i in (:img_list)
	  	and &NoImportSet;
	    and &ValidDatasetAnnotation;
	    and &OwnsDatasetAnnotation;
	    and &ValidImageAnnotation;
	    and &OwnsImageAnnotation;
  "
  >	
	
	
  <!ENTITY findCGCI
  "
    select i
    from Image as i 
	  &fetchCGCI;
      where 
        i in (:img_list)
  	    and &ValidClassification;
  "
  >	

  <!ENTITY findCGCI_Annotated
  "
    select i
    from Image as i 
	  &fetchCGCI;
	  &fetchImageAnnotation;
      where 
        i in (:img_list)
  	    and &ValidClassification;
	    and &ValidImageAnnotation;
	    and &OwnsImageAnnotation;
  "
  >	

  <!ENTITY findCGCPath
  "
    select cg	  
    from CategoryGroup cg 
	  &fetchCategoryGroup;
	  &fetchCategory;
	  &fetchClassificationImage;
	  where &ValidClassification;
  "
  >	

  <!ENTITY findCGCPath_Contained
  "	  
    &findCGCPath;
        and i in (:img_list)
  "
  >	

  <!ENTITY findCGCPath_Not_Contained
  "
    select cg	  
    from CategoryGroup cg
	  &fetchCategoryGroup;
	  &fetchCategory;
	  where cg not in ( 
	    select cg from CategoryGroup cg
	      where
	        cg.categories.classifications.image in ( :img_list )
	  )
  "
  >	
		
  <!ENTITY findImageAnn
  "
      select i_ann
	  from ImageAnnotation as i_ann 
	    left outer join fetch i_ann.image as i 
  	    left outer join fetch i.imagePixel as i_pix
	    &fetchImageAnnotationOwner;
  	    where 
		  i in (:img_list) 
	      and &ValidImageAnnotation;
  "
  >

  <!ENTITY findImageAnnWithID
  "
	    &findImageAnn;
  	    and &OwnsImageAnnotation;
  "
  >

  <!ENTITY findDatasetAnn
  "
    select d_ann
	from DatasetAnnotation as d_ann
      left outer join fetch d_ann.dataset as d 
  	  &fetchDatasetAnnotationOwner;
      where 
	    d in (:ds_list) 
	    and &ValidDatasetAnnotation;
	    and &NoImportSet;
  "
  >
  
  <!ENTITY findDatasetAnnWithID
  "
    &findDatasetAnn;
        and &OwnsDatasetAnnotation;
  "
  >
	
]>

<hibernate-mapping>
	
  <!-- Actual Queries: not much to see here -->
	
  <!-- load*Hierarchies -->	
  <query name="loadHierarchy_by_Project">&loadHierarchy_by_Project;</query>
  <query name="loadHierarchy_by_Dataset">&loadHierarchy_by_Dataset;</query>
  <query name="loadHierarchy_by_CategoryGroup">&loadHierarchy_by_CategoryGroup;</query>
  <query name="loadHierarchy_by_Category">&loadHierarchy_by_Category;</query>
  <query name="loadHierarchy_by_Project_Annotated">&loadHierarchy_by_Project_Annotated;</query>
  <query name="loadHierarchy_by_Dataset_Annotated">&loadHierarchy_by_Dataset_Annotated;</query>
  <query name="loadHierarchy_by_CategoryGroup_Annotated">&loadHierarchy_by_CategoryGroup_Annotated;</query>
  <query name="loadHierarchy_by_Category_Annotated">&loadHierarchy_by_Category_Annotated;</query>
	    
  <!-- find*Hierarchies -->
  <query name="findPDI">&findPDI;</query>	
  <query name="findPDI_Annotated">&findPDI_Annotated;</query>
  <query name="findCGCI">&findCGCI;</query>	
  <query name="findCGCI_Annotated">&findCGCI_Annotated;</query>
  <query name="findCGCPaths_Contained">&findCGCPath_Contained;</query>
  <query name="findCGCPaths_Not_Contained">&findCGCPath_Not_Contained;</query>	  		  
	
  <!-- findAnnotations -->
  <query name="findImageAnn">&findImageAnn;</query>
  <query name="findImageAnnWithID">&findImageAnnWithID;</query>
  <query name="findDatasetAnn">&findDatasetAnn;</query>
  <query name="findDatasetAnnWithID">&findDatasetAnnWithID;</query>

</hibernate-mapping>
